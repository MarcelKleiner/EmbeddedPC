
EmbeddedPC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b084  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800b31c  0800b31c  0001b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b574  0800b574  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b57c  0800b57c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  24000010  0800b594  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006bc  0800b594  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035cb7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004977  00000000  00000000  00055cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  0005a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002160  00000000  00000000  0005c988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ccf0  00000000  00000000  0005eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d6c7  00000000  00000000  0009b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00187975  00000000  00000000  000b8e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00240814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b5c  00000000  00000000  00240890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b304 	.word	0x0800b304

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b304 	.word	0x0800b304

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 fa86 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f818 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fc48 	bl	8000e78 <MX_GPIO_Init>
  MX_JPEG_Init();
 80005e8:	f000 f9ea 	bl	80009c0 <MX_JPEG_Init>
  MX_LTDC_Init();
 80005ec:	f000 f9fc 	bl	80009e8 <MX_LTDC_Init>
  MX_FMC_Init();
 80005f0:	f000 fbf4 	bl	8000ddc <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80005f4:	f000 faaa 	bl	8000b4c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80005f8:	f000 face 	bl	8000b98 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005fc:	f000 f928 	bl	8000850 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000600:	f000 f99e 	bl	8000940 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000604:	f000 fb1e 	bl	8000c44 <MX_TIM2_Init>
  MX_UART7_Init();
 8000608:	f000 fb76 	bl	8000cf8 <MX_UART7_Init>
  MX_USB_OTG_FS_HCD_Init();
 800060c:	f000 fbc4 	bl	8000d98 <MX_USB_OTG_FS_HCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
	...

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0cc      	sub	sp, #304	; 0x130
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800061e:	224c      	movs	r2, #76	; 0x4c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f00a fe66 	bl	800b2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800062c:	2220      	movs	r2, #32
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f00a fe5f 	bl	800b2f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4618      	mov	r0, r3
 800063c:	23bc      	movs	r3, #188	; 0xbc
 800063e:	461a      	mov	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f00a fe57 	bl	800b2f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000646:	2002      	movs	r0, #2
 8000648:	f003 ffec 	bl	8004624 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	4b7b      	ldr	r3, [pc, #492]	; (8000840 <SystemClock_Config+0x22c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a7a      	ldr	r2, [pc, #488]	; (8000840 <SystemClock_Config+0x22c>)
 8000658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b78      	ldr	r3, [pc, #480]	; (8000840 <SystemClock_Config+0x22c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	4b76      	ldr	r3, [pc, #472]	; (8000844 <SystemClock_Config+0x230>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	4a75      	ldr	r2, [pc, #468]	; (8000844 <SystemClock_Config+0x230>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000676:	4b73      	ldr	r3, [pc, #460]	; (8000844 <SystemClock_Config+0x230>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	f003 0201 	and.w	r2, r3, #1
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000686:	bf00      	nop
 8000688:	4b6d      	ldr	r3, [pc, #436]	; (8000840 <SystemClock_Config+0x22c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000694:	d1f8      	bne.n	8000688 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000696:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <SystemClock_Config+0x234>)
 8000698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069a:	4a6b      	ldr	r2, [pc, #428]	; (8000848 <SystemClock_Config+0x234>)
 800069c:	f023 0303 	bic.w	r3, r3, #3
 80006a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006cc:	233c      	movs	r3, #60	; 0x3c
 80006ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e4:	230c      	movs	r3, #12
 80006e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 ffdc 	bl	80046b8 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000706:	f000 fc71 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	233f      	movs	r3, #63	; 0x3f
 800070c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2303      	movs	r3, #3
 8000712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071c:	2308      	movs	r3, #8
 800071e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fbc8 	bl	8004ed8 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800074e:	f000 fc4d 	bl	8000fec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_UART7
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4a3d      	ldr	r2, [pc, #244]	; (800084c <SystemClock_Config+0x238>)
 8000758:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2204      	movs	r2, #4
 8000760:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2209      	movs	r2, #9
 8000768:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2201      	movs	r2, #1
 8000770:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2202      	movs	r2, #2
 8000778:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2201      	movs	r2, #1
 8000780:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	22c0      	movs	r2, #192	; 0xc0
 8000788:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2220      	movs	r2, #32
 8000790:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800079a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2220      	movs	r2, #32
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2281      	movs	r2, #129	; 0x81
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2202      	movs	r2, #2
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2202      	movs	r2, #2
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2202      	movs	r2, #2
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007cc:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2202      	movs	r2, #2
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2200      	movs	r2, #0
 8000804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fedc 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x21e>
  {
    Error_Handler();
 800082e:	f000 fbdd 	bl	8000fec <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000832:	f003 ff31 	bl	8004698 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000836:	bf00      	nop
 8000838:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58024800 	.word	0x58024800
 8000844:	58000400 	.word	0x58000400
 8000848:	58024400 	.word	0x58024400
 800084c:	210d100a 	.word	0x210d100a

08000850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_ADC1_Init+0xe4>)
 8000876:	4a30      	ldr	r2, [pc, #192]	; (8000938 <MX_ADC1_Init+0xe8>)
 8000878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_ADC1_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_ADC1_Init+0xe4>)
 800088e:	2204      	movs	r2, #4
 8000890:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_ADC1_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_ADC1_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008d2:	f001 fb57 	bl	8001f84 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008dc:	f000 fb86 	bl	8000fec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_ADC1_Init+0xe4>)
 80008ec:	f002 f91c 	bl	8002b28 <HAL_ADCEx_MultiModeConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008f6:	f000 fb79 	bl	8000fec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_ADC1_Init+0xec>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_ADC1_Init+0xe4>)
 800091e:	f001 fcd1 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000928:	f000 fb60 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000230 	.word	0x24000230
 8000938:	40022000 	.word	0x40022000
 800093c:	10c00010 	.word	0x10c00010

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_I2C1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_I2C1_Init+0x74>)
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <MX_I2C1_Init+0x7c>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000958:	2201      	movs	r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_I2C1_Init+0x74>)
 800097c:	f002 fcbe 	bl	80032fc <HAL_I2C_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000986:	f000 fb31 	bl	8000fec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_I2C1_Init+0x74>)
 800098e:	f002 fd45 	bl	800341c <HAL_I2CEx_ConfigAnalogFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 fb28 	bl	8000fec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C1_Init+0x74>)
 80009a0:	f002 fd87 	bl	80034b2 <HAL_I2CEx_ConfigDigitalFilter>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 fb1f 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000bc 	.word	0x240000bc
 80009b8:	40005400 	.word	0x40005400
 80009bc:	307075b1 	.word	0x307075b1

080009c0 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_JPEG_Init+0x20>)
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <MX_JPEG_Init+0x24>)
 80009c8:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_JPEG_Init+0x20>)
 80009cc:	f002 fdbe 	bl	800354c <HAL_JPEG_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80009d6:	f000 fb09 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24000294 	.word	0x24000294
 80009e4:	52003000 	.word	0x52003000

080009e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09a      	sub	sp, #104	; 0x68
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009f2:	2234      	movs	r2, #52	; 0x34
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00a fc7c 	bl	800b2f4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a fc76 	bl	800b2f4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a08:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a0a:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <MX_LTDC_Init+0x160>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a20:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a34:	220e      	movs	r2, #14
 8000a36:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a40:	f240 228e 	movw	r2, #654	; 0x28e
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a48:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a50:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a58:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a5e:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a76:	4833      	ldr	r0, [pc, #204]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000a78:	f003 fb2c 	bl	80040d4 <HAL_LTDC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a82:	f000 fab3 	bl	8000fec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a96:	2300      	movs	r3, #0
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000ad4:	f003 fbce 	bl	8004274 <HAL_LTDC_ConfigLayer>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000ade:	f000 fa85 	bl	8000fec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b04:	2305      	movs	r3, #5
 8000b06:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_LTDC_Init+0x15c>)
 8000b2e:	f003 fba1 	bl	8004274 <HAL_LTDC_ConfigLayer>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000b38:	f000 fa58 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3768      	adds	r7, #104	; 0x68
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	24000188 	.word	0x24000188
 8000b48:	50001000 	.word	0x50001000

08000b4c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <MX_SDMMC1_SD_Init+0x48>)
 8000b54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b68:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_SDMMC1_SD_Init+0x44>)
 8000b7e:	f006 fbf3 	bl	8007368 <HAL_SD_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000b88:	f000 fa30 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000108 	.word	0x24000108
 8000b94:	52007000 	.word	0x52007000

08000b98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000b9e:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bb2:	2207      	movs	r2, #7
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_SPI1_Init+0xa4>)
 8000c2a:	f007 fc51 	bl	80084d0 <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c34:	f000 f9da 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	240002ec 	.word	0x240002ec
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000c92:	f007 fd30 	bl	80086f6 <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f000 f9a6 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000cb0:	f008 f9f0 	bl	8009094 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cba:	f000 f997 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000cd6:	f007 fd65 	bl	80087a4 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ce0:	f000 f984 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM2_Init+0xb0>)
 8000ce6:	f000 fcb3 	bl	8001650 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000374 	.word	0x24000374

08000cf8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_UART7_Init+0x98>)
 8000cfe:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <MX_UART7_Init+0x9c>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000d40:	2300      	movs	r3, #0
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d48:	f009 f946 	bl	8009fd8 <HAL_RS485Ex_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_UART7_Init+0x5e>
  {
    Error_Handler();
 8000d52:	f000 f94b 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d5a:	f009 f9e0 	bl	800a11e <HAL_UARTEx_SetTxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_UART7_Init+0x70>
  {
    Error_Handler();
 8000d64:	f000 f942 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d6c:	f009 fa15 	bl	800a19a <HAL_UARTEx_SetRxFifoThreshold>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_UART7_Init+0x82>
  {
    Error_Handler();
 8000d76:	f000 f939 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_UART7_Init+0x98>)
 8000d7c:	f009 f996 	bl	800a0ac <HAL_UARTEx_DisableFifoMode>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_UART7_Init+0x92>
  {
    Error_Handler();
 8000d86:	f000 f931 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000030 	.word	0x24000030
 8000d94:	40007800 	.word	0x40007800

08000d98 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000da0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000dc2:	f002 fa38 	bl	8003236 <HAL_HCD_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8000dcc:	f000 f90e 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	240003c0 	.word	0x240003c0
 8000dd8:	40080000 	.word	0x40080000

08000ddc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_FMC_Init+0x94>)
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <MX_FMC_Init+0x98>)
 8000df8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_FMC_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000e36:	2310      	movs	r3, #16
 8000e38:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000e46:	2310      	movs	r3, #16
 8000e48:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e58:	f007 fafe 	bl	8008458 <HAL_SDRAM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000e62:	f000 f8c3 	bl	8000fec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000684 	.word	0x24000684
 8000e74:	52004140 	.word	0x52004140

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b54      	ldr	r3, [pc, #336]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a43      	ldr	r2, [pc, #268]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a2d      	ldr	r2, [pc, #180]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0x168>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210c      	movs	r1, #12
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000f84:	f002 f93e 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f88:	230c      	movs	r3, #12
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000fa0:	f001 ff80 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <MX_GPIO_Init+0x170>)
 8000fba:	f001 ff73 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000fd2:	f001 ff67 	bl	8002ea4 <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3738      	adds	r7, #56	; 0x38
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58021000 	.word	0x58021000
 8000fe8:	58020800 	.word	0x58020800

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x30>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x30>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x30>)
 8001014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	58024400 	.word	0x58024400

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_ADC_MspInit+0x80>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d129      	bne.n	80010a6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_ADC_MspInit+0x84>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108e:	2310      	movs	r3, #16
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_ADC_MspInit+0x88>)
 80010a2:	f001 feff 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000
 80010b4:	58024400 	.word	0x58024400
 80010b8:	58020800 	.word	0x58020800

080010bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <HAL_I2C_MspInit+0x88>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12d      	bne.n	800113a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fc:	23c0      	movs	r3, #192	; 0xc0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	2312      	movs	r3, #18
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <HAL_I2C_MspInit+0x90>)
 8001118:	f001 fec4 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_I2C_MspInit+0x8c>)
 800112e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40005400 	.word	0x40005400
 8001148:	58024400 	.word	0x58024400
 800114c:	58020400 	.word	0x58020400

08001150 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_JPEG_MspInit+0x3c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10e      	bne.n	8001180 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_JPEG_MspInit+0x40>)
 8001164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_JPEG_MspInit+0x40>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_JPEG_MspInit+0x40>)
 8001174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	52003000 	.word	0x52003000
 8001190:	58024400 	.word	0x58024400

08001194 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a92      	ldr	r2, [pc, #584]	; (80013fc <HAL_LTDC_MspInit+0x268>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f040 811e 	bne.w	80013f4 <HAL_LTDC_MspInit+0x260>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011b8:	4b91      	ldr	r3, [pc, #580]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80011be:	4a90      	ldr	r2, [pc, #576]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80011c8:	4b8d      	ldr	r3, [pc, #564]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	4b8a      	ldr	r3, [pc, #552]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a88      	ldr	r2, [pc, #544]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b86      	ldr	r3, [pc, #536]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f4:	4b82      	ldr	r3, [pc, #520]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a81      	ldr	r2, [pc, #516]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a79      	ldr	r2, [pc, #484]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b77      	ldr	r3, [pc, #476]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b73      	ldr	r3, [pc, #460]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a72      	ldr	r2, [pc, #456]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b6c      	ldr	r3, [pc, #432]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800126c:	4b64      	ldr	r3, [pc, #400]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a63      	ldr	r2, [pc, #396]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_LTDC_MspInit+0x26c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012a8:	2370      	movs	r3, #112	; 0x70
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b8:	230e      	movs	r3, #14
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4850      	ldr	r0, [pc, #320]	; (8001404 <HAL_LTDC_MspInit+0x270>)
 80012c4:	f001 fdee 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012da:	230e      	movs	r3, #14
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	4848      	ldr	r0, [pc, #288]	; (8001408 <HAL_LTDC_MspInit+0x274>)
 80012e6:	f001 fddd 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	23c1      	movs	r3, #193	; 0xc1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012fa:	230e      	movs	r3, #14
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4841      	ldr	r0, [pc, #260]	; (800140c <HAL_LTDC_MspInit+0x278>)
 8001306:	f001 fdcd 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800130a:	f240 437e 	movw	r3, #1150	; 0x47e
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800131c:	230e      	movs	r3, #14
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001324:	4619      	mov	r1, r3
 8001326:	483a      	ldr	r0, [pc, #232]	; (8001410 <HAL_LTDC_MspInit+0x27c>)
 8001328:	f001 fdbc 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800132c:	2303      	movs	r3, #3
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800133c:	2309      	movs	r3, #9
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001344:	4619      	mov	r1, r3
 8001346:	4833      	ldr	r0, [pc, #204]	; (8001414 <HAL_LTDC_MspInit+0x280>)
 8001348:	f001 fdac 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800134c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800135e:	230e      	movs	r3, #14
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	482a      	ldr	r0, [pc, #168]	; (8001414 <HAL_LTDC_MspInit+0x280>)
 800136a:	f001 fd9b 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_13;
 800136e:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001380:	230e      	movs	r3, #14
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <HAL_LTDC_MspInit+0x284>)
 800138c:	f001 fd8a 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80013a2:	230d      	movs	r3, #13
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	4619      	mov	r1, r3
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <HAL_LTDC_MspInit+0x27c>)
 80013ae:	f001 fd79 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80013b2:	2348      	movs	r3, #72	; 0x48
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c2:	230e      	movs	r3, #14
 80013c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <HAL_LTDC_MspInit+0x288>)
 80013ce:	f001 fd69 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80013d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013e4:	2309      	movs	r3, #9
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <HAL_LTDC_MspInit+0x284>)
 80013f0:	f001 fd58 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3740      	adds	r7, #64	; 0x40
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	50001000 	.word	0x50001000
 8001400:	58024400 	.word	0x58024400
 8001404:	58021000 	.word	0x58021000
 8001408:	58021400 	.word	0x58021400
 800140c:	58020800 	.word	0x58020800
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58021800 	.word	0x58021800
 800141c:	58020c00 	.word	0x58020c00

08001420 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <HAL_SD_MspInit+0xc8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d14d      	bne.n	80014de <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001444:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001448:	4a28      	ldr	r2, [pc, #160]	; (80014ec <HAL_SD_MspInit+0xcc>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001454:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_SD_MspInit+0xcc>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800149c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ae:	230c      	movs	r3, #12
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <HAL_SD_MspInit+0xd0>)
 80014ba:	f001 fcf3 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014be:	2304      	movs	r3, #4
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ce:	230c      	movs	r3, #12
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <HAL_SD_MspInit+0xd4>)
 80014da:	f001 fce3 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	52007000 	.word	0x52007000
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020800 	.word	0x58020800
 80014f4:	58020c00 	.word	0x58020c00

080014f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a39      	ldr	r2, [pc, #228]	; (80015fc <HAL_SPI_MspInit+0x104>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d16c      	bne.n	80015f4 <HAL_SPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800151c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001526:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800152c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800155e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4a21      	ldr	r2, [pc, #132]	; (8001600 <HAL_SPI_MspInit+0x108>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_SPI_MspInit+0x108>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a2:	2305      	movs	r3, #5
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <HAL_SPI_MspInit+0x10c>)
 80015ae:	f001 fc79 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c4:	2305      	movs	r3, #5
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <HAL_SPI_MspInit+0x110>)
 80015d0:	f001 fc68 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d4:	2308      	movs	r3, #8
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e4:	2305      	movs	r3, #5
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <HAL_SPI_MspInit+0x114>)
 80015f0:	f001 fc58 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	; 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40013000 	.word	0x40013000
 8001600:	58024400 	.word	0x58024400
 8001604:	58020c00 	.word	0x58020c00
 8001608:	58021800 	.word	0x58021800
 800160c:	58020400 	.word	0x58020400

08001610 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_TIM_PWM_MspInit+0x3c>)
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_TIM_PWM_MspInit+0x3c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_TIM_PWM_MspInit+0x3c>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	58024400 	.word	0x58024400

08001650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d11e      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_DAC_Pin;
 8001690:	2301      	movs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_DAC_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	f001 fbfa 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12e      	bne.n	8001740 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_UART_MspInit+0x8c>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_UART_MspInit+0x8c>)
 80016ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_UART_MspInit+0x8c>)
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_UART_MspInit+0x8c>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_UART_MspInit+0x8c>)
 8001708:	f043 0320 	orr.w	r3, r3, #32
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_UART_MspInit+0x8c>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    PF8     ------> UART7_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800171e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001730:	2307      	movs	r3, #7
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspInit+0x90>)
 800173c:	f001 fbb2 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40007800 	.word	0x40007800
 800174c:	58024400 	.word	0x58024400
 8001750:	58021400 	.word	0x58021400

08001754 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_HCD_MspInit+0x88>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12e      	bne.n	80017d4 <HAL_HCD_MspInit+0x80>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001794:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017a6:	230a      	movs	r3, #10
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <HAL_HCD_MspInit+0x90>)
 80017b2:	f001 fb77 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 80017b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 80017be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_HCD_MspInit+0x8c>)
 80017c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40080000 	.word	0x40080000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020000 	.word	0x58020000

080017e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <HAL_FMC_MspInit+0x108>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d170      	bne.n	80018e6 <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
 8001804:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_FMC_MspInit+0x108>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_FMC_MspInit+0x10c>)
 800180c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001810:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <HAL_FMC_MspInit+0x10c>)
 8001812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001816:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800181a:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_FMC_MspInit+0x10c>)
 800181c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001828:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800182c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	482d      	ldr	r0, [pc, #180]	; (80018f8 <HAL_FMC_MspInit+0x110>)
 8001844:	f001 fb2e 	bl	8002ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001848:	230c      	movs	r3, #12
 800184a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001858:	230c      	movs	r3, #12
 800185a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <HAL_FMC_MspInit+0x114>)
 8001862:	f001 fb1f 	bl	8002ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001876:	230c      	movs	r3, #12
 8001878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4820      	ldr	r0, [pc, #128]	; (8001900 <HAL_FMC_MspInit+0x118>)
 8001880:	f001 fb10 	bl	8002ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001884:	f248 1337 	movw	r3, #33079	; 0x8137
 8001888:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001896:	230c      	movs	r3, #12
 8001898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4819      	ldr	r0, [pc, #100]	; (8001904 <HAL_FMC_MspInit+0x11c>)
 80018a0:	f001 fb00 	bl	8002ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018a4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80018a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b6:	230c      	movs	r3, #12
 80018b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4812      	ldr	r0, [pc, #72]	; (8001908 <HAL_FMC_MspInit+0x120>)
 80018c0:	f001 faf0 	bl	8002ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80018c4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80018c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <HAL_FMC_MspInit+0x124>)
 80018e0:	f001 fae0 	bl	8002ea4 <HAL_GPIO_Init>
 80018e4:	e000      	b.n	80018e8 <HAL_FMC_MspInit+0x100>
    return;
 80018e6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2400002c 	.word	0x2400002c
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58021400 	.word	0x58021400
 80018fc:	58020800 	.word	0x58020800
 8001900:	58020000 	.word	0x58020000
 8001904:	58021800 	.word	0x58021800
 8001908:	58021000 	.word	0x58021000
 800190c:	58020c00 	.word	0x58020c00

08001910 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001918:	f7ff ff66 	bl	80017e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f92a 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <SystemInit+0xec>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a38      	ldr	r2, [pc, #224]	; (8001a6c <SystemInit+0xec>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <SystemInit+0xf0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	2b06      	cmp	r3, #6
 800199e:	d807      	bhi.n	80019b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <SystemInit+0xf0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 030f 	bic.w	r3, r3, #15
 80019a8:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <SystemInit+0xf0>)
 80019aa:	f043 0307 	orr.w	r3, r3, #7
 80019ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <SystemInit+0xf4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <SystemInit+0xf4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <SystemInit+0xf4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <SystemInit+0xf4>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	492b      	ldr	r1, [pc, #172]	; (8001a74 <SystemInit+0xf4>)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <SystemInit+0xf8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <SystemInit+0xf0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d907      	bls.n	80019ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019da:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <SystemInit+0xf0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 030f 	bic.w	r3, r3, #15
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <SystemInit+0xf0>)
 80019e4:	f043 0307 	orr.w	r3, r3, #7
 80019e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SystemInit+0xf4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <SystemInit+0xf4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SystemInit+0xf4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <SystemInit+0xf4>)
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <SystemInit+0xfc>)
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <SystemInit+0xf4>)
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <SystemInit+0x100>)
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <SystemInit+0xf4>)
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <SystemInit+0x104>)
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <SystemInit+0xf4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SystemInit+0xf4>)
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <SystemInit+0x104>)
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <SystemInit+0xf4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <SystemInit+0xf4>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <SystemInit+0x104>)
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <SystemInit+0xf4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <SystemInit+0xf4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <SystemInit+0xf4>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <SystemInit+0xf4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SystemInit+0x108>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <SystemInit+0x10c>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4a:	d202      	bcs.n	8001a52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <SystemInit+0x110>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <SystemInit+0x114>)
 8001a54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a58:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SystemInit+0xec>)
 8001a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a60:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	52002000 	.word	0x52002000
 8001a74:	58024400 	.word	0x58024400
 8001a78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a7c:	02020200 	.word	0x02020200
 8001a80:	01ff0000 	.word	0x01ff0000
 8001a84:	01010280 	.word	0x01010280
 8001a88:	5c001000 	.word	0x5c001000
 8001a8c:	ffff0000 	.word	0xffff0000
 8001a90:	51008108 	.word	0x51008108
 8001a94:	52004000 	.word	0x52004000

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a9c:	f7ff ff70 	bl	8001980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aa2:	e003      	b.n	8001aac <LoopCopyDataInit>

08001aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aaa:	3104      	adds	r1, #4

08001aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab4:	d3f6      	bcc.n	8001aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ab8:	e002      	b.n	8001ac0 <LoopFillZerobss>

08001aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001abc:	f842 3b04 	str.w	r3, [r2], #4

08001ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac4:	d3f9      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f009 fbf1 	bl	800b2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7fe fd85 	bl	80005d8 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ad4:	0800b584 	.word	0x0800b584
  ldr  r0, =_sdata
 8001ad8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001adc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001ae0:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001ae4:	240006bc 	.word	0x240006bc

08001ae8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC3_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af2:	2003      	movs	r0, #3
 8001af4:	f001 f9a4 	bl	8002e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af8:	f003 fba4 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 8001afc:	4601      	mov	r1, r0
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_Init+0x68>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_Init+0x6c>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa21 f303 	lsr.w	r3, r1, r3
 8001b14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_Init+0x68>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_Init+0x6c>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <HAL_Init+0x70>)
 8001b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_Init+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f814 	bl	8001b64 <HAL_InitTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e002      	b.n	8001b4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b46:	f7ff fa59 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58024400 	.word	0x58024400
 8001b58:	0800b32c 	.word	0x0800b32c
 8001b5c:	24000004 	.word	0x24000004
 8001b60:	24000000 	.word	0x24000000

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_InitTick+0x60>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e021      	b.n	8001bbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_InitTick+0x64>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_InitTick+0x60>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 f97b 	bl	8002e8a <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f001 f953 	bl	8002e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x68>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2400000c 	.word	0x2400000c
 8001bc8:	24000000 	.word	0x24000000
 8001bcc:	24000008 	.word	0x24000008

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2400000c 	.word	0x2400000c
 8001bf4:	240006b8 	.word	0x240006b8

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	240006b8 	.word	0x240006b8

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_Delay+0x40>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2400000c 	.word	0x2400000c

08001c54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetREVID+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	5c001000 	.word	0x5c001000

08001c6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	609a      	str	r2, [r3, #8]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	611a      	str	r2, [r3, #16]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3360      	adds	r3, #96	; 0x60
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]
  }
}
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3330      	adds	r3, #48	; 0x30
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	211f      	movs	r1, #31
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 011f 	and.w	r1, r3, #31
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3314      	adds	r3, #20
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0e5b      	lsrs	r3, r3, #25
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0d1b      	lsrs	r3, r3, #20
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2107      	movs	r1, #7
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	0d1b      	lsrs	r3, r3, #20
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0318 	and.w	r3, r3, #24
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e50:	40d9      	lsrs	r1, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	400b      	ands	r3, r1
 8001e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	000fffff 	.word	0x000fffff

08001e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	5fffffc0 	.word	0x5fffffc0

08001e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	6fffffc0 	.word	0x6fffffc0

08001ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <LL_ADC_IsEnabled+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_ADC_IsEnabled+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e18e      	b.n	80022bc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f83f 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff67 	bl	8001e98 <LL_ADC_IsDeepPowerDownEnabled>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff4d 	bl	8001e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff82 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d113      	bne.n	8002012 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff66 	bl	8001ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ff4:	4b9a      	ldr	r3, [pc, #616]	; (8002260 <HAL_ADC_Init+0x2dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	4a9a      	ldr	r2, [pc, #616]	; (8002264 <HAL_ADC_Init+0x2e0>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002004:	e002      	b.n	800200c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff66 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff77 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002048:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8129 	bne.w	80022aa <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8125 	bne.w	80022aa <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002068:	f043 0202 	orr.w	r2, r3, #2
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff4b 	bl	8001f10 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d136      	bne.n	80020ee <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a78      	ldr	r2, [pc, #480]	; (8002268 <HAL_ADC_Init+0x2e4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_ADC_Init+0x110>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <HAL_ADC_Init+0x2e8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10e      	bne.n	80020b2 <HAL_ADC_Init+0x12e>
 8002094:	4874      	ldr	r0, [pc, #464]	; (8002268 <HAL_ADC_Init+0x2e4>)
 8002096:	f7ff ff3b 	bl	8001f10 <LL_ADC_IsEnabled>
 800209a:	4604      	mov	r4, r0
 800209c:	4873      	ldr	r0, [pc, #460]	; (800226c <HAL_ADC_Init+0x2e8>)
 800209e:	f7ff ff37 	bl	8001f10 <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4323      	orrs	r3, r4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e008      	b.n	80020c4 <HAL_ADC_Init+0x140>
 80020b2:	486f      	ldr	r0, [pc, #444]	; (8002270 <HAL_ADC_Init+0x2ec>)
 80020b4:	f7ff ff2c 	bl	8001f10 <LL_ADC_IsEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_ADC_Init+0x2e4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_ADC_Init+0x158>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_ADC_Init+0x2e8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_Init+0x15c>
 80020dc:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_ADC_Init+0x2f0>)
 80020de:	e000      	b.n	80020e2 <HAL_ADC_Init+0x15e>
 80020e0:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_ADC_Init+0x2f4>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4610      	mov	r0, r2
 80020ea:	f7ff fdbf 	bl	8001c6c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020ee:	f7ff fdb1 	bl	8001c54 <HAL_GetREVID>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d914      	bls.n	8002126 <HAL_ADC_Init+0x1a2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b10      	cmp	r3, #16
 8002102:	d110      	bne.n	8002126 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7d5b      	ldrb	r3, [r3, #21]
 8002108:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800210e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002114:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f1b      	ldrb	r3, [r3, #28]
 800211a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800211c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800211e:	f043 030c 	orr.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e00d      	b.n	8002142 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7d5b      	ldrb	r3, [r3, #21]
 800212a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002130:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002136:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7f1b      	ldrb	r3, [r3, #28]
 800213c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f1b      	ldrb	r3, [r3, #28]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d106      	bne.n	8002158 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	3b01      	subs	r3, #1
 8002150:	045b      	lsls	r3, r3, #17
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_ADC_Init+0x2f8>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	430b      	orrs	r3, r1
 8002186:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fed2 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002192:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fedf 	bl	8001f5c <LL_ADC_INJ_IsConversionOngoing>
 800219e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d14a      	bne.n	800223c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d147      	bne.n	800223c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7d1b      	ldrb	r3, [r3, #20]
 80021b0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_ADC_Init+0x2fc>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	430b      	orrs	r3, r1
 80021cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11b      	bne.n	8002210 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_ADC_Init+0x300>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ec:	3a01      	subs	r2, #1
 80021ee:	0411      	lsls	r1, r2, #16
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002200:	430a      	orrs	r2, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e007      	b.n	8002220 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fb58 	bl	80028ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d121      	bne.n	8002288 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f023 010f 	bic.w	r1, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
 800225c:	e01c      	b.n	8002298 <HAL_ADC_Init+0x314>
 800225e:	bf00      	nop
 8002260:	24000000 	.word	0x24000000
 8002264:	053e2d63 	.word	0x053e2d63
 8002268:	40022000 	.word	0x40022000
 800226c:	40022100 	.word	0x40022100
 8002270:	58026000 	.word	0x58026000
 8002274:	40022300 	.word	0x40022300
 8002278:	58026300 	.word	0x58026300
 800227c:	fff0c003 	.word	0xfff0c003
 8002280:	ffffbffc 	.word	0xffffbffc
 8002284:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 020f 	bic.w	r2, r2, #15
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f023 0303 	bic.w	r3, r3, #3
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
 80022a8:	e007      	b.n	80022ba <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f043 0210 	orr.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3724      	adds	r7, #36	; 0x24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b099      	sub	sp, #100	; 0x64
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a99      	ldr	r2, [pc, #612]	; (8002544 <HAL_ADC_ConfigChannel+0x280>)
 80022de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x2a>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e2e6      	b.n	80028bc <HAL_ADC_ConfigChannel+0x5f8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe1b 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 82cb 	bne.w	800289e <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x62>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	e00f      	b.n	8002346 <HAL_ADC_ConfigChannel+0x82>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69d1      	ldr	r1, [r2, #28]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	f7ff fd0b 	bl	8001d7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fde3 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002370:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fdf0 	bl	8001f5c <LL_ADC_INJ_IsConversionOngoing>
 800237c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800237e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 80b3 	bne.w	80024ec <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 80af 	bne.w	80024ec <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	461a      	mov	r2, r3
 800239c:	f7ff fd1a 	bl	8001dd4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023a0:	4b69      	ldr	r3, [pc, #420]	; (8002548 <HAL_ADC_ConfigChannel+0x284>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ac:	d10b      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x102>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	e01d      	b.n	8002402 <HAL_ADC_ConfigChannel+0x13e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x128>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	e00a      	b.n	8002402 <HAL_ADC_ConfigChannel+0x13e>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d027      	beq.n	800245c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800241a:	f7ff fc5b 	bl	8001cd4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x170>
 800242e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002432:	e000      	b.n	8002436 <HAL_ADC_ConfigChannel+0x172>
 8002434:	2300      	movs	r3, #0
 8002436:	461a      	mov	r2, r3
 8002438:	f7ff fc85 	bl	8001d46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6919      	ldr	r1, [r3, #16]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x18e>
 800244c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002450:	e000      	b.n	8002454 <HAL_ADC_ConfigChannel+0x190>
 8002452:	2300      	movs	r3, #0
 8002454:	461a      	mov	r2, r3
 8002456:	f7ff fc5d 	bl	8001d14 <LL_ADC_SetDataRightShift>
 800245a:	e047      	b.n	80024ec <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fd0d 	bl	8001f10 <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 81d9 	bne.w	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f7ff fc8e 	bl	8001e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_ADC_ConfigChannel+0x280>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 8101 	bne.w	800271e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_ADC_ConfigChannel+0x288>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2b09      	cmp	r3, #9
 800253a:	bf94      	ite	ls
 800253c:	2301      	movls	r3, #1
 800253e:	2300      	movhi	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e016      	b.n	8002572 <HAL_ADC_ConfigChannel+0x2ae>
 8002544:	47ff0000 	.word	0x47ff0000
 8002548:	5c001000 	.word	0x5c001000
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2b09      	cmp	r3, #9
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002572:	2b00      	cmp	r3, #0
 8002574:	d064      	beq.n	8002640 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x2ce>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	3301      	adds	r3, #1
 800258a:	069b      	lsls	r3, r3, #26
 800258c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002590:	e00e      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x2ec>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x30c>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	e010      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x32e>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x354>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	051b      	lsls	r3, r3, #20
 8002616:	e011      	b.n	800263c <HAL_ADC_ConfigChannel+0x378>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263c:	430b      	orrs	r3, r1
 800263e:	e069      	b.n	8002714 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_ADC_ConfigChannel+0x398>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	069b      	lsls	r3, r3, #26
 8002656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265a:	e00e      	b.n	800267a <HAL_ADC_ConfigChannel+0x3b6>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	61fb      	str	r3, [r7, #28]
  return result;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	069b      	lsls	r3, r3, #26
 8002676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_ADC_ConfigChannel+0x3d6>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	e010      	b.n	80026bc <HAL_ADC_ConfigChannel+0x3f8>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	617b      	str	r3, [r7, #20]
  return result;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	ea42 0103 	orr.w	r1, r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x424>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	3b1e      	subs	r3, #30
 80026e0:	051b      	lsls	r3, r3, #20
 80026e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e6:	e014      	b.n	8002712 <HAL_ADC_ConfigChannel+0x44e>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	60fb      	str	r3, [r7, #12]
  return result;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002712:	430b      	orrs	r3, r1
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	4619      	mov	r1, r3
 800271a:	f7ff fb5b 	bl	8001dd4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f280 80c4 	bge.w	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_ADC_ConfigChannel+0x478>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a64      	ldr	r2, [pc, #400]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x47c>
 800273c:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_ADC_ConfigChannel+0x608>)
 800273e:	e000      	b.n	8002742 <HAL_ADC_ConfigChannel+0x47e>
 8002740:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_ADC_ConfigChannel+0x60c>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fab8 	bl	8001cb8 <LL_ADC_GetCommonPathInternalCh>
 8002748:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_ADC_ConfigChannel+0x49a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5b      	ldr	r2, [pc, #364]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_ADC_ConfigChannel+0x4b8>
 800275e:	4859      	ldr	r0, [pc, #356]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 8002760:	f7ff fbd6 	bl	8001f10 <LL_ADC_IsEnabled>
 8002764:	4604      	mov	r4, r0
 8002766:	4858      	ldr	r0, [pc, #352]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 8002768:	f7ff fbd2 	bl	8001f10 <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	4323      	orrs	r3, r4
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e008      	b.n	800278e <HAL_ADC_ConfigChannel+0x4ca>
 800277c:	4855      	ldr	r0, [pc, #340]	; (80028d4 <HAL_ADC_ConfigChannel+0x610>)
 800277e:	f7ff fbc7 	bl	8001f10 <LL_ADC_IsEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07b      	beq.n	800288a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_ADC_ConfigChannel+0x614>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d12e      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x536>
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d129      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_ADC_ConfigChannel+0x610>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d17f      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x500>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x504>
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_ADC_ConfigChannel+0x608>)
 80027c6:	e000      	b.n	80027ca <HAL_ADC_ConfigChannel+0x506>
 80027c8:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <HAL_ADC_ConfigChannel+0x60c>)
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff fa5d 	bl	8001c92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_ADC_ConfigChannel+0x618>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_ADC_ConfigChannel+0x61c>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f8:	e05a      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_ADC_ConfigChannel+0x620>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d11e      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x57e>
 8002804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d119      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_ADC_ConfigChannel+0x610>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d14b      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x568>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x56c>
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_ADC_ConfigChannel+0x608>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x56e>
 8002830:	4a27      	ldr	r2, [pc, #156]	; (80028d0 <HAL_ADC_ConfigChannel+0x60c>)
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7ff fa29 	bl	8001c92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002840:	e036      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_ADC_ConfigChannel+0x624>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d131      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
 800284c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12c      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_ADC_ConfigChannel+0x610>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d127      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_ADC_ConfigChannel+0x600>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x5b0>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_ADC_ConfigChannel+0x604>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x5b4>
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_ADC_ConfigChannel+0x608>)
 8002876:	e000      	b.n	800287a <HAL_ADC_ConfigChannel+0x5b6>
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_ADC_ConfigChannel+0x60c>)
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7ff fa05 	bl	8001c92 <LL_ADC_SetCommonPathInternalCh>
 8002888:	e012      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800289c:	e008      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3764      	adds	r7, #100	; 0x64
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40022100 	.word	0x40022100
 80028cc:	40022300 	.word	0x40022300
 80028d0:	58026300 	.word	0x58026300
 80028d4:	58026000 	.word	0x58026000
 80028d8:	cb840000 	.word	0xcb840000
 80028dc:	24000000 	.word	0x24000000
 80028e0:	053e2d63 	.word	0x053e2d63
 80028e4:	c7520000 	.word	0xc7520000
 80028e8:	cfb80000 	.word	0xcfb80000

080028ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a70      	ldr	r2, [pc, #448]	; (8002abc <ADC_ConfigureBoostMode+0x1d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <ADC_ConfigureBoostMode+0x1c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6f      	ldr	r2, [pc, #444]	; (8002ac0 <ADC_ConfigureBoostMode+0x1d4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d109      	bne.n	800291c <ADC_ConfigureBoostMode+0x30>
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <ADC_ConfigureBoostMode+0x1d8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e008      	b.n	800292e <ADC_ConfigureBoostMode+0x42>
 800291c:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <ADC_ConfigureBoostMode+0x1dc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002932:	f002 fdf9 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8002936:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002940:	d006      	beq.n	8002950 <ADC_ConfigureBoostMode+0x64>
 8002942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002946:	d00b      	beq.n	8002960 <ADC_ConfigureBoostMode+0x74>
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d000      	beq.n	8002950 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800294e:	e05d      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e055      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	60fb      	str	r3, [r7, #12]
        break;
 8002966:	e051      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002968:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800296c:	f003 fd26 	bl	80063bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002970:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800297a:	d02a      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
 800297c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002980:	d813      	bhi.n	80029aa <ADC_ConfigureBoostMode+0xbe>
 8002982:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002986:	d024      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
 8002988:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800298c:	d806      	bhi.n	800299c <ADC_ConfigureBoostMode+0xb0>
 800298e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002992:	d01e      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
 8002994:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002998:	d01b      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800299a:	e037      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800299c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a0:	d017      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
 80029a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029a6:	d014      	beq.n	80029d2 <ADC_ConfigureBoostMode+0xe6>
        break;
 80029a8:	e030      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80029aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029ae:	d021      	beq.n	80029f4 <ADC_ConfigureBoostMode+0x108>
 80029b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029b4:	d806      	bhi.n	80029c4 <ADC_ConfigureBoostMode+0xd8>
 80029b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029ba:	d013      	beq.n	80029e4 <ADC_ConfigureBoostMode+0xf8>
 80029bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c0:	d014      	beq.n	80029ec <ADC_ConfigureBoostMode+0x100>
        break;
 80029c2:	e023      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80029c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029c8:	d018      	beq.n	80029fc <ADC_ConfigureBoostMode+0x110>
 80029ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029ce:	d019      	beq.n	8002a04 <ADC_ConfigureBoostMode+0x118>
        break;
 80029d0:	e01c      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0c9b      	lsrs	r3, r3, #18
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	60fb      	str	r3, [r7, #12]
        break;
 80029e2:	e013      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
        break;
 80029ea:	e00f      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	60fb      	str	r3, [r7, #12]
        break;
 80029f2:	e00b      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	60fb      	str	r3, [r7, #12]
        break;
 80029fa:	e007      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	09db      	lsrs	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
        break;
 8002a02:	e003      	b.n	8002a0c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	60fb      	str	r3, [r7, #12]
        break;
 8002a0a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a0c:	f7ff f922 	bl	8001c54 <HAL_GetREVID>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d815      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <ADC_ConfigureBoostMode+0x1e0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d908      	bls.n	8002a34 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a30:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a32:	e03e      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	e035      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <ADC_ConfigureBoostMode+0x1e4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d808      	bhi.n	8002a66 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	e025      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <ADC_ConfigureBoostMode+0x1e8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d80a      	bhi.n	8002a84 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	e016      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <ADC_ConfigureBoostMode+0x1ec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d80a      	bhi.n	8002aa2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	e007      	b.n	8002ab2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ab0:	609a      	str	r2, [r3, #8]
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40022100 	.word	0x40022100
 8002ac4:	40022300 	.word	0x40022300
 8002ac8:	58026300 	.word	0x58026300
 8002acc:	01312d00 	.word	0x01312d00
 8002ad0:	005f5e10 	.word	0x005f5e10
 8002ad4:	00bebc20 	.word	0x00bebc20
 8002ad8:	017d7840 	.word	0x017d7840

08002adc <LL_ADC_IsEnabled>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_IsEnabled+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_IsEnabled+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d101      	bne.n	8002b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b09f      	sub	sp, #124	; 0x7c
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0ba      	b.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002b58:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	e001      	b.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e09d      	b.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ffbd 	bl	8002b02 <LL_ADC_REG_IsConversionOngoing>
 8002b88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ffb7 	bl	8002b02 <LL_ADC_REG_IsConversionOngoing>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d17f      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d17c      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002bb4:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bb6:	e000      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d039      	beq.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10e      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002bea:	4836      	ldr	r0, [pc, #216]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bec:	f7ff ff76 	bl	8002adc <LL_ADC_IsEnabled>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	4835      	ldr	r0, [pc, #212]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002bf4:	f7ff ff72 	bl	8002adc <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e008      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002c08:	4832      	ldr	r0, [pc, #200]	; (8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c0a:	f7ff ff67 	bl	8002adc <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d047      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6811      	ldr	r1, [r2, #0]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6892      	ldr	r2, [r2, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c36:	e03a      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10e      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002c58:	481a      	ldr	r0, [pc, #104]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c5a:	f7ff ff3f 	bl	8002adc <LL_ADC_IsEnabled>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	4819      	ldr	r0, [pc, #100]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c62:	f7ff ff3b 	bl	8002adc <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4323      	orrs	r3, r4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e008      	b.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002c76:	4817      	ldr	r0, [pc, #92]	; (8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c78:	f7ff ff30 	bl	8002adc <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c98:	e009      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002cac:	e000      	b.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	377c      	adds	r7, #124	; 0x7c
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022100 	.word	0x40022100
 8002ccc:	40022300 	.word	0x40022300
 8002cd0:	58026300 	.word	0x58026300
 8002cd4:	58026000 	.word	0x58026000
 8002cd8:	fffff0e0 	.word	0xfffff0e0

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	05fa0000 	.word	0x05fa0000

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0c:	d301      	bcc.n	8002e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00f      	b.n	8002e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <SysTick_Config+0x40>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f7ff ff8e 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SysTick_Config+0x40>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2a:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <SysTick_Config+0x40>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff47 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff5e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff90 	bl	8002d94 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5f 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffb2 	bl	8002dfc <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_GPIO_Init+0x234>)
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb6:	e194      	b.n	80031e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8186 	beq.w	80031dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_GPIO_Init+0x4c>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d007      	beq.n	8002ef0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee4:	2b11      	cmp	r3, #17
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b12      	cmp	r3, #18
 8002eee:	d130      	bne.n	8002f52 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f26:	2201      	movs	r2, #1
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0201 	and.w	r2, r3, #1
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0xee>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b12      	cmp	r3, #18
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80e0 	beq.w	80031dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_GPIO_Init+0x238>)
 800301e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003022:	4a2e      	ldr	r2, [pc, #184]	; (80030dc <HAL_GPIO_Init+0x238>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_GPIO_Init+0x238>)
 800302e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303a:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <HAL_GPIO_Init+0x23c>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_GPIO_Init+0x240>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d052      	beq.n	800310c <HAL_GPIO_Init+0x268>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_GPIO_Init+0x244>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_GPIO_Init+0x22e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_GPIO_Init+0x248>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02b      	beq.n	80030ce <HAL_GPIO_Init+0x22a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_GPIO_Init+0x24c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d025      	beq.n	80030ca <HAL_GPIO_Init+0x226>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_GPIO_Init+0x250>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01f      	beq.n	80030c6 <HAL_GPIO_Init+0x222>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_GPIO_Init+0x254>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x21e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_GPIO_Init+0x258>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x21a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_GPIO_Init+0x25c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x216>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_GPIO_Init+0x260>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x212>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_GPIO_Init+0x264>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x20e>
 80030ae:	2309      	movs	r3, #9
 80030b0:	e02d      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030b2:	230a      	movs	r3, #10
 80030b4:	e02b      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030b6:	2308      	movs	r3, #8
 80030b8:	e029      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e027      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030be:	2306      	movs	r3, #6
 80030c0:	e025      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030c2:	2305      	movs	r3, #5
 80030c4:	e023      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e021      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e01f      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e01d      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e01b      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030d6:	bf00      	nop
 80030d8:	58000080 	.word	0x58000080
 80030dc:	58024400 	.word	0x58024400
 80030e0:	58000400 	.word	0x58000400
 80030e4:	58020000 	.word	0x58020000
 80030e8:	58020400 	.word	0x58020400
 80030ec:	58020800 	.word	0x58020800
 80030f0:	58020c00 	.word	0x58020c00
 80030f4:	58021000 	.word	0x58021000
 80030f8:	58021400 	.word	0x58021400
 80030fc:	58021800 	.word	0x58021800
 8003100:	58021c00 	.word	0x58021c00
 8003104:	58022000 	.word	0x58022000
 8003108:	58022400 	.word	0x58022400
 800310c:	2300      	movs	r3, #0
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311e:	4938      	ldr	r1, [pc, #224]	; (8003200 <HAL_GPIO_Init+0x35c>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f ae63 	bne.w	8002eb8 <HAL_GPIO_Init+0x14>
  }
}
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	58000400 	.word	0x58000400

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003238:	b08f      	sub	sp, #60	; 0x3c
 800323a:	af0a      	add	r7, sp, #40	; 0x28
 800323c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e054      	b.n	80032f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fa76 	bl	8001754 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2203      	movs	r2, #3
 800326c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f007 fe68 	bl	800af5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	687e      	ldr	r6, [r7, #4]
 8003294:	466d      	mov	r5, sp
 8003296:	f106 0410 	add.w	r4, r6, #16
 800329a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80032aa:	1d33      	adds	r3, r6, #4
 80032ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f007 fdf2 	bl	800ae98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f007 fe5f 	bl	800af7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	687e      	ldr	r6, [r7, #4]
 80032c8:	466d      	mov	r5, sp
 80032ca:	f106 0410 	add.w	r4, r6, #16
 80032ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032da:	e885 0003 	stmia.w	r5, {r0, r1}
 80032de:	1d33      	adds	r3, r6, #4
 80032e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e2:	6838      	ldr	r0, [r7, #0]
 80032e4:	f007 fef2 	bl	800b0cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd feca 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	; 0x24
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800334c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e006      	b.n	8003384 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003382:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d104      	bne.n	8003396 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003394:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_I2C_Init+0x11c>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	02008000 	.word	0x02008000

0800341c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d138      	bne.n	80034a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800343c:	2302      	movs	r3, #2
 800343e:	e032      	b.n	80034a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800346e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6819      	ldr	r1, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d139      	bne.n	800353c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e033      	b.n	800353e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003504:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e070      	b.n	8003640 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fdec 	bl	8001150 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_JPEG_Init+0xfc>)
 80035e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_JPEG_Init+0x100>)
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fae9 	bl	8003bd0 <JPEG_Set_HuffEnc_Mem>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e018      	b.n	8003640 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	0800b4dc 	.word	0x0800b4dc
 800364c:	0800b51c 	.word	0x0800b51c

08003650 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8003650:	b480      	push	{r7}
 8003652:	b08b      	sub	sp, #44	; 0x2c
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e020      	b.n	80036aa <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	4413      	add	r3, r2
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d90f      	bls.n	800369e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e055      	b.n	800372e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	440b      	add	r3, r1
 800368c:	3201      	adds	r2, #1
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
      p++;
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	3301      	adds	r3, #1
 8003696:	623b      	str	r3, [r7, #32]
      i--;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	3b01      	subs	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ee      	bne.n	8003682 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b0f      	cmp	r3, #15
 80036ae:	d9db      	bls.n	8003668 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	4413      	add	r3, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
  p = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80036ce:	e027      	b.n	8003720 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]
      p++;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	3301      	adds	r3, #1
 80036e0:	623b      	str	r3, [r7, #32]
      code++;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d0eb      	beq.n	80036d0 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b1f      	cmp	r3, #31
 80036fc:	d901      	bls.n	8003702 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e015      	b.n	800372e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8003702:	2201      	movs	r2, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d301      	bcc.n	8003714 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e00c      	b.n	800372e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    si++;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1dd      	bne.n	80036e8 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	372c      	adds	r7, #44	; 0x2c
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8003740:	af00      	add	r7, sp, #0
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	6018      	str	r0, [r3, #0]
 8003746:	463b      	mov	r3, r7
 8003748:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	f107 020c 	add.w	r2, r7, #12
 8003756:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800375a:	f7ff ff79 	bl	8003650 <JPEG_Bits_To_SizeCodes>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8003764:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800376c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8003770:	e066      	b.n	8003840 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8003778:	e05a      	b.n	8003830 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8003782:	4413      	add	r3, r2
 8003784:	3310      	adds	r3, #16
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800378c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8003794:	23a0      	movs	r3, #160	; 0xa0
 8003796:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800379a:	e021      	b.n	80037e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800379c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80037a0:	2bf0      	cmp	r3, #240	; 0xf0
 80037a2:	d103      	bne.n	80037ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 80037a4:	23a1      	movs	r3, #161	; 0xa1
 80037a6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80037aa:	e019      	b.n	80037e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80037ac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80037ba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80037c6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	461a      	mov	r2, r3
 80037d4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80037d8:	4413      	add	r3, r2
 80037da:	3b01      	subs	r3, #1
 80037dc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80037e0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80037e4:	2ba1      	cmp	r3, #161	; 0xa1
 80037e6:	d901      	bls.n	80037ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80037e8:	2301      	movs	r3, #1
 80037ea:	e029      	b.n	8003840 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80037f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037f8:	463b      	mov	r3, r7
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003808:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800380c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	3b01      	subs	r3, #1
 8003816:	b2d9      	uxtb	r1, r3
 8003818:	463b      	mov	r3, r7
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8003820:	4413      	add	r3, r2
 8003822:	460a      	mov	r2, r1
 8003824:	701a      	strb	r2, [r3, #0]
      k++;
 8003826:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800382a:	3301      	adds	r3, #1
 800382c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8003830:	f107 0308 	add.w	r3, r7, #8
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800383a:	429a      	cmp	r2, r3
 800383c:	d39d      	bcc.n	800377a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8003850:	af00      	add	r7, sp, #0
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	6018      	str	r0, [r3, #0]
 8003856:	463b      	mov	r3, r7
 8003858:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8003862:	f107 0208 	add.w	r2, r7, #8
 8003866:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800386a:	f7ff fef1 	bl	8003650 <JPEG_Bits_To_SizeCodes>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8003874:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800387c:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8003880:	e03b      	b.n	80038fa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8003888:	e030      	b.n	80038ec <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8003892:	4413      	add	r3, r2
 8003894:	3310      	adds	r3, #16
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800389c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80038a0:	2b0b      	cmp	r3, #11
 80038a2:	d901      	bls.n	80038a8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80038a4:	2301      	movs	r3, #1
 80038a6:	e028      	b.n	80038fa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80038b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038b4:	463b      	mov	r3, r7
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80038bc:	3302      	adds	r3, #2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80038c4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80038c8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2d9      	uxtb	r1, r3
 80038d4:	463b      	mov	r3, r7
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80038dc:	4413      	add	r3, r2
 80038de:	460a      	mov	r2, r1
 80038e0:	701a      	strb	r2, [r3, #0]
      k++;
 80038e2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80038e6:	3301      	adds	r3, #1
 80038e8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 80038ec:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80038f0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3c8      	bcc.n	800388a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b09a      	sub	sp, #104	; 0x68
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d106      	bne.n	800392c <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8003926:	3318      	adds	r3, #24
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
 800392a:	e00f      	b.n	800394c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d106      	bne.n	8003948 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8003942:	3318      	adds	r3, #24
 8003944:	663b      	str	r3, [r7, #96]	; 0x60
 8003946:	e001      	b.n	800394c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e05b      	b.n	8003a04 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d057      	beq.n	8003a02 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	4619      	mov	r1, r3
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7ff ff76 	bl	800384a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8003964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800396c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003970:	e048      	b.n	8003a04 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8003972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8003976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003978:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800397c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	3304      	adds	r3, #4
 8003982:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8003984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003986:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800398a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800398c:	230c      	movs	r3, #12
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8003990:	e034      	b.n	80039fc <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8003992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003994:	3b01      	subs	r3, #1
 8003996:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8003998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399a:	3b04      	subs	r3, #4
 800399c:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800399e:	f107 0214 	add.w	r2, r7, #20
 80039a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80039ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80039b8:	440b      	add	r3, r1
 80039ba:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4313      	orrs	r3, r2
 80039c2:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	3b01      	subs	r3, #1
 80039c8:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80039ca:	f107 0214 	add.w	r2, r7, #20
 80039ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80039da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039dc:	3302      	adds	r3, #2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80039e4:	440b      	add	r3, r1
 80039e6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	041a      	lsls	r2, r3, #16
 80039f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f6:	431a      	orrs	r2, r3
 80039f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fa:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80039fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d8c7      	bhi.n	8003992 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3768      	adds	r7, #104	; 0x68
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	6018      	str	r0, [r3, #0]
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003a24:	f107 030c 	add.w	r3, r7, #12
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	1d3a      	adds	r2, r7, #4
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d10a      	bne.n	8003a4e <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a48:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8003a4c:	e016      	b.n	8003a7c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8003a5a:	1d3a      	adds	r2, r7, #4
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10a      	bne.n	8003a78 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8003a6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a72:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8003a76:	e001      	b.n	8003a7c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e09c      	b.n	8003bb6 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8003a7c:	f107 0308 	add.w	r3, r7, #8
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8096 	beq.w	8003bb4 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003a88:	f107 0214 	add.w	r2, r7, #20
 8003a8c:	f107 0308 	add.w	r3, r7, #8
 8003a90:	4611      	mov	r1, r2
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	f7ff fe51 	bl	800373a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8003a9e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8003aa6:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8003aaa:	e084      	b.n	8003bb6 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003aac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003ab0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8003aba:	e00e      	b.n	8003ada <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8003abc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003ac0:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8003ac4:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003ac6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003aca:	3304      	adds	r3, #4
 8003acc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8003ad0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8003ada:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d9ec      	bls.n	8003abc <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8003ae2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8003ae8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003aea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003aee:	3304      	adds	r3, #4
 8003af0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8003af4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8003afa:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003afc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003b00:	3304      	adds	r3, #4
 8003b02:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8003b06:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003b0a:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8003b0c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003b0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003b12:	3304      	adds	r3, #4
 8003b14:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8003b18:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <JPEG_Set_HuffAC_Mem+0x1c0>)
 8003b1e:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003b20:	23a2      	movs	r3, #162	; 0xa2
 8003b22:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8003b26:	e041      	b.n	8003bac <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8003b28:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8003b32:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003b36:	3b04      	subs	r3, #4
 8003b38:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003b3c:	f107 0214 	add.w	r2, r7, #20
 8003b40:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b4e:	f107 0114 	add.w	r1, r7, #20
 8003b52:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b56:	3328      	adds	r3, #40	; 0x28
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8003b66:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003b70:	f107 0214 	add.w	r2, r7, #20
 8003b74:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b82:	f107 0114 	add.w	r1, r7, #20
 8003b86:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003b8a:	3328      	adds	r3, #40	; 0x28
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003b9a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8003b9e:	041a      	lsls	r2, r3, #16
 8003ba0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003baa:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003bac:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d8b9      	bhi.n	8003b28 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0fd10fd0 	.word	0x0fd10fd0
 8003bc4:	0fd30fd2 	.word	0x0fd30fd2
 8003bc8:	0fd50fd4 	.word	0x0fd50fd4
 8003bcc:	0fd70fd6 	.word	0x0fd70fd6

08003bd0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f84d 	bl	8003c78 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003be6:	461a      	mov	r2, r3
 8003be8:	491f      	ldr	r1, [pc, #124]	; (8003c68 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ff0e 	bl	8003a0c <JPEG_Set_HuffAC_Mem>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	e030      	b.n	8003c60 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003c06:	461a      	mov	r2, r3
 8003c08:	4918      	ldr	r1, [pc, #96]	; (8003c6c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fefe 	bl	8003a0c <JPEG_Set_HuffAC_Mem>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	e020      	b.n	8003c60 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003c26:	461a      	mov	r2, r3
 8003c28:	4911      	ldr	r1, [pc, #68]	; (8003c70 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fe6a 	bl	8003904 <JPEG_Set_HuffDC_Mem>
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	e010      	b.n	8003c60 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003c46:	461a      	mov	r2, r3
 8003c48:	490a      	ldr	r1, [pc, #40]	; (8003c74 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fe5a 	bl	8003904 <JPEG_Set_HuffDC_Mem>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	e000      	b.n	8003c60 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800b374 	.word	0x0800b374
 8003c6c:	0800b428 	.word	0x0800b428
 8003c70:	0800b33c 	.word	0x0800b33c
 8003c74:	0800b358 	.word	0x0800b358

08003c78 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b08b      	sub	sp, #44	; 0x2c
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003c80:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003c82:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003c84:	4b80      	ldr	r3, [pc, #512]	; (8003e88 <JPEG_Set_Huff_DHTMem+0x210>)
 8003c86:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <JPEG_Set_Huff_DHTMem+0x214>)
 8003c8a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003c8c:	4b80      	ldr	r3, [pc, #512]	; (8003e90 <JPEG_Set_Huff_DHTMem+0x218>)
 8003c8e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003c98:	330c      	adds	r3, #12
 8003c9a:	623b      	str	r3, [r7, #32]
  index = 16;
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003ca0:	e01d      	b.n	8003cde <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	5cd3      	ldrb	r3, [r2, r3]
 8003caa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	3b02      	subs	r3, #2
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003cb6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	3b03      	subs	r3, #3
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003cc2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	3a04      	subs	r2, #4
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003ccc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	601a      	str	r2, [r3, #0]
    address--;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d8de      	bhi.n	8003ca2 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003cec:	3318      	adds	r3, #24
 8003cee:	623b      	str	r3, [r7, #32]
  index = 12;
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003cf4:	e021      	b.n	8003d3a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	7c1b      	ldrb	r3, [r3, #16]
 8003d00:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	3b02      	subs	r3, #2
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	440b      	add	r3, r1
 8003d0a:	7c1b      	ldrb	r3, [r3, #16]
 8003d0c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003d0e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	3b03      	subs	r3, #3
 8003d14:	6979      	ldr	r1, [r7, #20]
 8003d16:	440b      	add	r3, r1
 8003d18:	7c1b      	ldrb	r3, [r3, #16]
 8003d1a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003d1c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	3a04      	subs	r2, #4
 8003d22:	6979      	ldr	r1, [r7, #20]
 8003d24:	440a      	add	r2, r1
 8003d26:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003d28:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	601a      	str	r2, [r3, #0]
    address--;
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	3b04      	subs	r3, #4
 8003d32:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	3b04      	subs	r3, #4
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d8da      	bhi.n	8003cf6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003d48:	3328      	adds	r3, #40	; 0x28
 8003d4a:	623b      	str	r3, [r7, #32]
  index = 16;
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003d50:	e01d      	b.n	8003d8e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	3b01      	subs	r3, #1
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	5cd3      	ldrb	r3, [r2, r3]
 8003d5a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	3b02      	subs	r3, #2
 8003d60:	69f9      	ldr	r1, [r7, #28]
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003d66:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	3b03      	subs	r3, #3
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003d72:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8003d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d76:	3a04      	subs	r2, #4
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003d7c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	601a      	str	r2, [r3, #0]
    address--;
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	3b04      	subs	r3, #4
 8003d86:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d8de      	bhi.n	8003d52 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003d9c:	33cc      	adds	r3, #204	; 0xcc
 8003d9e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	3b04      	subs	r3, #4
 8003dca:	623b      	str	r3, [r7, #32]
  index = 160;
 8003dcc:	23a0      	movs	r3, #160	; 0xa0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003dd0:	e021      	b.n	8003e16 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	7c1b      	ldrb	r3, [r3, #16]
 8003ddc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	3b02      	subs	r3, #2
 8003de2:	69f9      	ldr	r1, [r7, #28]
 8003de4:	440b      	add	r3, r1
 8003de6:	7c1b      	ldrb	r3, [r3, #16]
 8003de8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003dea:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3b03      	subs	r3, #3
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	440b      	add	r3, r1
 8003df4:	7c1b      	ldrb	r3, [r3, #16]
 8003df6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003df8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	3a04      	subs	r2, #4
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	440a      	add	r2, r1
 8003e02:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003e04:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	601a      	str	r2, [r3, #0]
    address--;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	3b04      	subs	r3, #4
 8003e0e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	3b04      	subs	r3, #4
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d8da      	bhi.n	8003dd2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003e24:	33cc      	adds	r3, #204	; 0xcc
 8003e26:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	061a      	lsls	r2, r3, #24
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003e52:	33dc      	adds	r3, #220	; 0xdc
 8003e54:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	7bdb      	ldrb	r3, [r3, #15]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	7b92      	ldrb	r2, [r2, #14]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	623b      	str	r3, [r7, #32]
  index = 12;
 8003e7e:	230c      	movs	r3, #12
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003e82:	e027      	b.n	8003ed4 <JPEG_Set_Huff_DHTMem+0x25c>
 8003e84:	0800b374 	.word	0x0800b374
 8003e88:	0800b428 	.word	0x0800b428
 8003e8c:	0800b33c 	.word	0x0800b33c
 8003e90:	0800b358 	.word	0x0800b358
 8003e94:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003ea2:	6939      	ldr	r1, [r7, #16]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	440b      	add	r3, r1
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003eac:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003eb8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	3a02      	subs	r2, #2
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003ec2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	601a      	str	r2, [r3, #0]
    address--;
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	3b04      	subs	r3, #4
 8003ecc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d8de      	bhi.n	8003e98 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003ee2:	33dc      	adds	r3, #220	; 0xdc
 8003ee4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	7c5b      	ldrb	r3, [r3, #17]
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	7c1b      	ldrb	r3, [r3, #16]
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003f10:	33e8      	adds	r3, #232	; 0xe8
 8003f12:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b6d      	ldr	r3, [pc, #436]	; (80040d0 <JPEG_Set_Huff_DHTMem+0x458>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	7edb      	ldrb	r3, [r3, #27]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	7e92      	ldrb	r2, [r2, #26]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	623b      	str	r3, [r7, #32]
  index = 8;
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003f40:	e021      	b.n	8003f86 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	3301      	adds	r3, #1
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	7c1b      	ldrb	r3, [r3, #16]
 8003f4c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	440b      	add	r3, r1
 8003f54:	3310      	adds	r3, #16
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003f5a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	440b      	add	r3, r1
 8003f64:	7c1b      	ldrb	r3, [r3, #16]
 8003f66:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003f68:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	3a02      	subs	r2, #2
 8003f6e:	6939      	ldr	r1, [r7, #16]
 8003f70:	440a      	add	r2, r1
 8003f72:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003f74:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	601a      	str	r2, [r3, #0]
    address--;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	3b04      	subs	r3, #4
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d8da      	bhi.n	8003f42 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003f94:	33e8      	adds	r3, #232	; 0xe8
 8003f96:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	061a      	lsls	r2, r3, #24
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003fc2:	33f8      	adds	r3, #248	; 0xf8
 8003fc4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <JPEG_Set_Huff_DHTMem+0x458>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	7bdb      	ldrb	r3, [r3, #15]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	7b92      	ldrb	r2, [r2, #14]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	623b      	str	r3, [r7, #32]
  index = 12;
 8003fee:	230c      	movs	r3, #12
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003ff2:	e01d      	b.n	8004030 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	440b      	add	r3, r1
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004008:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	3b01      	subs	r3, #1
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004014:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	3a02      	subs	r2, #2
 800401a:	69b9      	ldr	r1, [r7, #24]
 800401c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800401e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	601a      	str	r2, [r3, #0]
    address--;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	3b04      	subs	r3, #4
 8004028:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	3b04      	subs	r3, #4
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	2b03      	cmp	r3, #3
 8004034:	d8de      	bhi.n	8003ff4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800403e:	33f8      	adds	r3, #248	; 0xf8
 8004040:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	7c5b      	ldrb	r3, [r3, #17]
 800404e:	061a      	lsls	r2, r3, #24
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	431a      	orrs	r2, r3
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	7c1b      	ldrb	r3, [r3, #16]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800406c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004070:	623b      	str	r3, [r7, #32]
  index = 160;
 8004072:	23a0      	movs	r3, #160	; 0xa0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004076:	e021      	b.n	80040bc <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	3301      	adds	r3, #1
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4413      	add	r3, r2
 8004080:	7c1b      	ldrb	r3, [r3, #16]
 8004082:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	440b      	add	r3, r1
 800408a:	3310      	adds	r3, #16
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004090:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	3b01      	subs	r3, #1
 8004096:	69b9      	ldr	r1, [r7, #24]
 8004098:	440b      	add	r3, r1
 800409a:	7c1b      	ldrb	r3, [r3, #16]
 800409c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800409e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	3a02      	subs	r2, #2
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	440a      	add	r2, r1
 80040a8:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80040aa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	601a      	str	r2, [r3, #0]
    address--;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	3b04      	subs	r3, #4
 80040b4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	3b04      	subs	r3, #4
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d8da      	bhi.n	8004078 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80040c2:	bf00      	nop
 80040c4:	372c      	adds	r7, #44	; 0x2c
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	ffff0000 	.word	0xffff0000

080040d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0bf      	b.n	8004266 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd f84a 	bl	8001194 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004116:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6999      	ldr	r1, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800412c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6899      	ldr	r1, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_LTDC_Init+0x19c>)
 8004148:	400b      	ands	r3, r1
 800414a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6899      	ldr	r1, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68d9      	ldr	r1, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <HAL_LTDC_Init+0x19c>)
 8004176:	400b      	ands	r3, r1
 8004178:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68d9      	ldr	r1, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b33      	ldr	r3, [pc, #204]	; (8004270 <HAL_LTDC_Init+0x19c>)
 80041a4:	400b      	ands	r3, r1
 80041a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6959      	ldr	r1, [r3, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_LTDC_Init+0x19c>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6959      	ldr	r1, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0206 	orr.w	r2, r2, #6
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	f000f800 	.word	0xf000f800

08004274 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004274:	b5b0      	push	{r4, r5, r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_LTDC_ConfigLayer+0x1a>
 800428a:	2302      	movs	r3, #2
 800428c:	e02c      	b.n	80042e8 <HAL_LTDC_ConfigLayer+0x74>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2134      	movs	r1, #52	; 0x34
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4614      	mov	r4, r2
 80042b2:	461d      	mov	r5, r3
 80042b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f811 	bl	80042f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bdb0      	pop	{r4, r5, r7, pc}

080042f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	4413      	add	r3, r2
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	4413      	add	r3, r2
 800431e:	3384      	adds	r3, #132	; 0x84
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	4611      	mov	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	01d2      	lsls	r2, r2, #7
 800432c:	440a      	add	r2, r1
 800432e:	3284      	adds	r2, #132	; 0x84
 8004330:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004334:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	4413      	add	r3, r2
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	01db      	lsls	r3, r3, #7
 8004354:	440b      	add	r3, r1
 8004356:	3384      	adds	r3, #132	; 0x84
 8004358:	4619      	mov	r1, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436e:	4413      	add	r3, r2
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	01db      	lsls	r3, r3, #7
 800437e:	4413      	add	r3, r2
 8004380:	3384      	adds	r3, #132	; 0x84
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	4611      	mov	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	01d2      	lsls	r2, r2, #7
 800438e:	440a      	add	r2, r1
 8004390:	3284      	adds	r2, #132	; 0x84
 8004392:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004396:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043a6:	4413      	add	r3, r2
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	01db      	lsls	r3, r3, #7
 80043b4:	440b      	add	r3, r1
 80043b6:	3384      	adds	r3, #132	; 0x84
 80043b8:	4619      	mov	r1, r3
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	01db      	lsls	r3, r3, #7
 80043ca:	4413      	add	r3, r2
 80043cc:	3384      	adds	r3, #132	; 0x84
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	4611      	mov	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	01d2      	lsls	r2, r2, #7
 80043da:	440a      	add	r2, r1
 80043dc:	3284      	adds	r2, #132	; 0x84
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	01db      	lsls	r3, r3, #7
 80043ee:	4413      	add	r3, r2
 80043f0:	3384      	adds	r3, #132	; 0x84
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	01db      	lsls	r3, r3, #7
 8004420:	4413      	add	r3, r2
 8004422:	3384      	adds	r3, #132	; 0x84
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	4413      	add	r3, r2
 8004432:	3384      	adds	r3, #132	; 0x84
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004440:	461a      	mov	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	431a      	orrs	r2, r3
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	01db      	lsls	r3, r3, #7
 8004454:	440b      	add	r3, r1
 8004456:	3384      	adds	r3, #132	; 0x84
 8004458:	4619      	mov	r1, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	01db      	lsls	r3, r3, #7
 800446a:	4413      	add	r3, r2
 800446c:	3384      	adds	r3, #132	; 0x84
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4611      	mov	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	01d2      	lsls	r2, r2, #7
 800447a:	440a      	add	r2, r1
 800447c:	3284      	adds	r2, #132	; 0x84
 800447e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004482:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	01db      	lsls	r3, r3, #7
 800448e:	4413      	add	r3, r2
 8004490:	3384      	adds	r3, #132	; 0x84
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4413      	add	r3, r2
 80044a6:	3384      	adds	r3, #132	; 0x84
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4619      	mov	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	01db      	lsls	r3, r3, #7
 80044b4:	440b      	add	r3, r1
 80044b6:	3384      	adds	r3, #132	; 0x84
 80044b8:	4619      	mov	r1, r3
 80044ba:	4b58      	ldr	r3, [pc, #352]	; (800461c <LTDC_SetConfig+0x32c>)
 80044bc:	4013      	ands	r3, r2
 80044be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	6809      	ldr	r1, [r1, #0]
 80044cc:	4608      	mov	r0, r1
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	01c9      	lsls	r1, r1, #7
 80044d2:	4401      	add	r1, r0
 80044d4:	3184      	adds	r1, #132	; 0x84
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	01db      	lsls	r3, r3, #7
 80044e4:	4413      	add	r3, r2
 80044e6:	3384      	adds	r3, #132	; 0x84
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	01db      	lsls	r3, r3, #7
 80044f4:	4413      	add	r3, r2
 80044f6:	3384      	adds	r3, #132	; 0x84
 80044f8:	461a      	mov	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	01db      	lsls	r3, r3, #7
 8004508:	4413      	add	r3, r2
 800450a:	3384      	adds	r3, #132	; 0x84
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800451c:	2304      	movs	r3, #4
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e01b      	b.n	800455a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d102      	bne.n	8004530 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800452a:	2303      	movs	r3, #3
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e014      	b.n	800455a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d00b      	beq.n	8004550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800453c:	2b02      	cmp	r3, #2
 800453e:	d007      	beq.n	8004550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004544:	2b03      	cmp	r3, #3
 8004546:	d003      	beq.n	8004550 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800454c:	2b07      	cmp	r3, #7
 800454e:	d102      	bne.n	8004556 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004550:	2302      	movs	r3, #2
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e001      	b.n	800455a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004556:	2301      	movs	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	4413      	add	r3, r2
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	4611      	mov	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	01d2      	lsls	r2, r2, #7
 8004574:	440a      	add	r2, r1
 8004576:	3284      	adds	r2, #132	; 0x84
 8004578:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1acb      	subs	r3, r1, r3
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	3307      	adds	r3, #7
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6809      	ldr	r1, [r1, #0]
 80045a0:	4608      	mov	r0, r1
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	01c9      	lsls	r1, r1, #7
 80045a6:	4401      	add	r1, r0
 80045a8:	3184      	adds	r1, #132	; 0x84
 80045aa:	4313      	orrs	r3, r2
 80045ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	; 0x84
 80045bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4619      	mov	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	01db      	lsls	r3, r3, #7
 80045c8:	440b      	add	r3, r1
 80045ca:	3384      	adds	r3, #132	; 0x84
 80045cc:	4619      	mov	r1, r3
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <LTDC_SetConfig+0x330>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	4413      	add	r3, r2
 80045e0:	3384      	adds	r3, #132	; 0x84
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	4413      	add	r3, r2
 80045f6:	3384      	adds	r3, #132	; 0x84
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	4611      	mov	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	01d2      	lsls	r2, r2, #7
 8004604:	440a      	add	r2, r1
 8004606:	3284      	adds	r2, #132	; 0x84
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	3724      	adds	r7, #36	; 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	fffff8f8 	.word	0xfffff8f8
 8004620:	fffff800 	.word	0xfffff800

08004624 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_PWREx_ConfigSupply+0x70>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d00a      	beq.n	800464e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_PWREx_ConfigSupply+0x70>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e01f      	b.n	800468a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e01d      	b.n	800468a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_PWREx_ConfigSupply+0x70>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f023 0207 	bic.w	r2, r3, #7
 8004656:	490f      	ldr	r1, [pc, #60]	; (8004694 <HAL_PWREx_ConfigSupply+0x70>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4313      	orrs	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800465e:	f7fd facb 	bl	8001bf8 <HAL_GetTick>
 8004662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004664:	e009      	b.n	800467a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004666:	f7fd fac7 	bl	8001bf8 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004674:	d901      	bls.n	800467a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e007      	b.n	800468a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_PWREx_ConfigSupply+0x70>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	d1ee      	bne.n	8004666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	58024800 	.word	0x58024800

08004698 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	60d3      	str	r3, [r2, #12]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	58024800 	.word	0x58024800

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e3ff      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8087 	beq.w	80047e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d8:	4b99      	ldr	r3, [pc, #612]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046e2:	4b97      	ldr	r3, [pc, #604]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d007      	beq.n	80046fe <HAL_RCC_OscConfig+0x46>
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	2b18      	cmp	r3, #24
 80046f2:	d110      	bne.n	8004716 <HAL_RCC_OscConfig+0x5e>
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d10b      	bne.n	8004716 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fe:	4b90      	ldr	r3, [pc, #576]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x12c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d168      	bne.n	80047e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e3d9      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x76>
 8004720:	4b87      	ldr	r3, [pc, #540]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a86      	ldr	r2, [pc, #536]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e02e      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b82      	ldr	r3, [pc, #520]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a81      	ldr	r2, [pc, #516]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800473c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b7f      	ldr	r3, [pc, #508]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7e      	ldr	r2, [pc, #504]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xbc>
 800475a:	4b79      	ldr	r3, [pc, #484]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a78      	ldr	r2, [pc, #480]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 8004774:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fa30 	bl	8001bf8 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd fa2c 	bl	8001bf8 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e38d      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ae:	4b64      	ldr	r3, [pc, #400]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xe4>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fa1c 	bl	8001bf8 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd fa18 	bl	8001bf8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e379      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047d6:	4b5a      	ldr	r3, [pc, #360]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x10c>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ae 	beq.w	8004950 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f4:	4b52      	ldr	r3, [pc, #328]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047fe:	4b50      	ldr	r3, [pc, #320]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_RCC_OscConfig+0x162>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2b18      	cmp	r3, #24
 800480e:	d13a      	bne.n	8004886 <HAL_RCC_OscConfig+0x1ce>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d135      	bne.n	8004886 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RCC_OscConfig+0x17a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e34b      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	f7fd fa0f 	bl	8001c54 <HAL_GetREVID>
 8004836:	4602      	mov	r2, r0
 8004838:	f241 0303 	movw	r3, #4099	; 0x1003
 800483c:	429a      	cmp	r2, r3
 800483e:	d817      	bhi.n	8004870 <HAL_RCC_OscConfig+0x1b8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d108      	bne.n	800485a <HAL_RCC_OscConfig+0x1a2>
 8004848:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004850:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004856:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	e07a      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	031b      	lsls	r3, r3, #12
 8004868:	4935      	ldr	r1, [pc, #212]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486e:	e06f      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	4930      	ldr	r1, [pc, #192]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004884:	e064      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d045      	beq.n	800491a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800488e:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 0219 	bic.w	r2, r3, #25
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4929      	ldr	r1, [pc, #164]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd f9aa 	bl	8001bf8 <HAL_GetTick>
 80048a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fd f9a6 	bl	8001bf8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e307      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	f7fd f9c5 	bl	8001c54 <HAL_GetREVID>
 80048ca:	4602      	mov	r2, r0
 80048cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d817      	bhi.n	8004904 <HAL_RCC_OscConfig+0x24c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d108      	bne.n	80048ee <HAL_RCC_OscConfig+0x236>
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048e4:	4a16      	ldr	r2, [pc, #88]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	6053      	str	r3, [r2, #4]
 80048ec:	e030      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	031b      	lsls	r3, r3, #12
 80048fc:	4910      	ldr	r1, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
 8004902:	e025      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	490b      	ldr	r1, [pc, #44]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
 8004918:	e01a      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <HAL_RCC_OscConfig+0x288>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fd f967 	bl	8001bf8 <HAL_GetTick>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fd f963 	bl	8001bf8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d903      	bls.n	8004944 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e2c4      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
 8004940:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004944:	4ba4      	ldr	r3, [pc, #656]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ee      	bne.n	800492e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a9 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b9e      	ldr	r3, [pc, #632]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004968:	4b9b      	ldr	r3, [pc, #620]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d007      	beq.n	8004984 <HAL_RCC_OscConfig+0x2cc>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b18      	cmp	r3, #24
 8004978:	d13a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x338>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d135      	bne.n	80049f0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004984:	4b94      	ldr	r3, [pc, #592]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_OscConfig+0x2e4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d001      	beq.n	800499c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e296      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800499c:	f7fd f95a 	bl	8001c54 <HAL_GetREVID>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d817      	bhi.n	80049da <HAL_RCC_OscConfig+0x322>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d108      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049b2:	4b89      	ldr	r3, [pc, #548]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80049ba:	4a87      	ldr	r2, [pc, #540]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c2:	e075      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c4:	4b84      	ldr	r3, [pc, #528]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	069b      	lsls	r3, r3, #26
 80049d2:	4981      	ldr	r1, [pc, #516]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049d8:	e06a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049da:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	497b      	ldr	r1, [pc, #492]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049ee:	e05f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d042      	beq.n	8004a7e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049f8:	4b77      	ldr	r3, [pc, #476]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a76      	ldr	r2, [pc, #472]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd f8f8 	bl	8001bf8 <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a0c:	f7fd f8f4 	bl	8001bf8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e255      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a1e:	4b6e      	ldr	r3, [pc, #440]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a2a:	f7fd f913 	bl	8001c54 <HAL_GetREVID>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d817      	bhi.n	8004a68 <HAL_RCC_OscConfig+0x3b0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d108      	bne.n	8004a52 <HAL_RCC_OscConfig+0x39a>
 8004a40:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a48:	4a63      	ldr	r2, [pc, #396]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	6053      	str	r3, [r2, #4]
 8004a50:	e02e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
 8004a52:	4b61      	ldr	r3, [pc, #388]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	069b      	lsls	r3, r3, #26
 8004a60:	495d      	ldr	r1, [pc, #372]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
 8004a66:	e023      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	4958      	ldr	r1, [pc, #352]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60cb      	str	r3, [r1, #12]
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a7e:	4b56      	ldr	r3, [pc, #344]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a55      	ldr	r2, [pc, #340]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd f8b5 	bl	8001bf8 <HAL_GetTick>
 8004a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a92:	f7fd f8b1 	bl	8001bf8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e212      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d036      	beq.n	8004b2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac4:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd f892 	bl	8001bf8 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fd f88e 	bl	8001bf8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1ef      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x420>
 8004af6:	e018      	b.n	8004b2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afc:	4a36      	ldr	r2, [pc, #216]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd f878 	bl	8001bf8 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fd f874 	bl	8001bf8 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1d5      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d036      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b3e:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd f855 	bl	8001bf8 <HAL_GetTick>
 8004b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b52:	f7fd f851 	bl	8001bf8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1b2      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b64:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x49a>
 8004b70:	e018      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b7e:	f7fd f83b 	bl	8001bf8 <HAL_GetTick>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b86:	f7fd f837 	bl	8001bf8 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e198      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <HAL_RCC_OscConfig+0x520>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8085 	beq.w	8004cbc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_RCC_OscConfig+0x524>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_OscConfig+0x524>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bbe:	f7fd f81b 	bl	8001bf8 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bc4:	e00c      	b.n	8004be0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fd f817 	bl	8001bf8 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b64      	cmp	r3, #100	; 0x64
 8004bd2:	d905      	bls.n	8004be0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e178      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be0:	4b96      	ldr	r3, [pc, #600]	; (8004e3c <HAL_RCC_OscConfig+0x784>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ec      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x54a>
 8004bf4:	4b92      	ldr	r3, [pc, #584]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a91      	ldr	r2, [pc, #580]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	e02d      	b.n	8004c5e <HAL_RCC_OscConfig+0x5a6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x56c>
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	4a8c      	ldr	r2, [pc, #560]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	6713      	str	r3, [r2, #112]	; 0x70
 8004c16:	4b8a      	ldr	r3, [pc, #552]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a89      	ldr	r2, [pc, #548]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	e01c      	b.n	8004c5e <HAL_RCC_OscConfig+0x5a6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0x58e>
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a83      	ldr	r2, [pc, #524]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a80      	ldr	r2, [pc, #512]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	e00b      	b.n	8004c5e <HAL_RCC_OscConfig+0x5a6>
 8004c46:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a7a      	ldr	r2, [pc, #488]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fc ffc7 	bl	8001bf8 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fc ffc3 	bl	8001bf8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e122      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c84:	4b6e      	ldr	r3, [pc, #440]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCC_OscConfig+0x5b6>
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fc ffb1 	bl	8001bf8 <HAL_GetTick>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fc ffad 	bl	8001bf8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e10c      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cb0:	4b63      	ldr	r3, [pc, #396]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8101 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cc6:	4b5e      	ldr	r3, [pc, #376]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cce:	2b18      	cmp	r3, #24
 8004cd0:	f000 80bc 	beq.w	8004e4c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	f040 8095 	bne.w	8004e08 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b58      	ldr	r3, [pc, #352]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a57      	ldr	r2, [pc, #348]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fc ff85 	bl	8001bf8 <HAL_GetTick>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fc ff81 	bl	8001bf8 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0e2      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d04:	4b4e      	ldr	r3, [pc, #312]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d14:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCC_OscConfig+0x78c>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	430a      	orrs	r2, r1
 8004d24:	4946      	ldr	r1, [pc, #280]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	628b      	str	r3, [r1, #40]	; 0x28
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	025b      	lsls	r3, r3, #9
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	3b01      	subs	r3, #1
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	3b01      	subs	r3, #1
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d5a:	4939      	ldr	r1, [pc, #228]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004d60:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4a36      	ldr	r2, [pc, #216]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d6c:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCC_OscConfig+0x790>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d78:	00d2      	lsls	r2, r2, #3
 8004d7a:	4931      	ldr	r1, [pc, #196]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d80:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f023 020c 	bic.w	r2, r3, #12
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	492c      	ldr	r1, [pc, #176]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f023 0202 	bic.w	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4928      	ldr	r1, [pc, #160]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004da4:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fc ff0a 	bl	8001bf8 <HAL_GetTick>
 8004de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fc ff06 	bl	8001bf8 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e067      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x730>
 8004e06:	e05f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fc fef0 	bl	8001bf8 <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fc feec 	bl	8001bf8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04d      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_RCC_OscConfig+0x788>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x764>
 8004e3a:	e045      	b.n	8004ec8 <HAL_RCC_OscConfig+0x810>
 8004e3c:	58024800 	.word	0x58024800
 8004e40:	58024400 	.word	0x58024400
 8004e44:	fffffc0c 	.word	0xfffffc0c
 8004e48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_RCC_OscConfig+0x81c>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCC_OscConfig+0x81c>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d031      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f003 0203 	and.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d12a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d122      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	0a5b      	lsrs	r3, r3, #9
 8004e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d108      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0e1b      	lsrs	r3, r3, #24
 8004eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3730      	adds	r7, #48	; 0x30
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400

08004ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e19c      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b8a      	ldr	r3, [pc, #552]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d910      	bls.n	8004f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b87      	ldr	r3, [pc, #540]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 020f 	bic.w	r2, r3, #15
 8004f02:	4985      	ldr	r1, [pc, #532]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b83      	ldr	r3, [pc, #524]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e184      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	4b7b      	ldr	r3, [pc, #492]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d908      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f38:	4b78      	ldr	r3, [pc, #480]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4975      	ldr	r1, [pc, #468]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d908      	bls.n	8004f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f66:	4b6d      	ldr	r3, [pc, #436]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	496a      	ldr	r1, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d010      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	4b64      	ldr	r3, [pc, #400]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d908      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f94:	4b61      	ldr	r3, [pc, #388]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	495e      	ldr	r1, [pc, #376]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	4b59      	ldr	r3, [pc, #356]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d908      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004fc2:	4b56      	ldr	r3, [pc, #344]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4953      	ldr	r1, [pc, #332]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d908      	bls.n	8005002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f023 020f 	bic.w	r2, r3, #15
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4947      	ldr	r1, [pc, #284]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d055      	beq.n	80050ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4940      	ldr	r1, [pc, #256]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 800501c:	4313      	orrs	r3, r2
 800501e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d107      	bne.n	8005038 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005028:	4b3c      	ldr	r3, [pc, #240]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d121      	bne.n	8005078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0f6      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d107      	bne.n	8005050 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005040:	4b36      	ldr	r3, [pc, #216]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d115      	bne.n	8005078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0ea      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005058:	4b30      	ldr	r3, [pc, #192]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0de      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005068:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0d6      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005078:	4b28      	ldr	r3, [pc, #160]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 0207 	bic.w	r2, r3, #7
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4925      	ldr	r1, [pc, #148]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 8005086:	4313      	orrs	r3, r2
 8005088:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fc fdb5 	bl	8001bf8 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005092:	f7fc fdb1 	bl	8001bf8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e0be      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d1eb      	bne.n	8005092 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d208      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f023 020f 	bic.w	r2, r3, #15
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	490e      	ldr	r1, [pc, #56]	; (800511c <HAL_RCC_ClockConfig+0x244>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d214      	bcs.n	8005120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	4906      	ldr	r1, [pc, #24]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_RCC_ClockConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e086      	b.n	8005226 <HAL_RCC_ClockConfig+0x34e>
 8005118:	52002000 	.word	0x52002000
 800511c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005138:	429a      	cmp	r2, r3
 800513a:	d208      	bcs.n	800514e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800513c:	4b3c      	ldr	r3, [pc, #240]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	4939      	ldr	r1, [pc, #228]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 800514a:	4313      	orrs	r3, r2
 800514c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d010      	beq.n	800517c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	4b34      	ldr	r3, [pc, #208]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005166:	429a      	cmp	r2, r3
 8005168:	d208      	bcs.n	800517c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	492e      	ldr	r1, [pc, #184]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 8005178:	4313      	orrs	r3, r2
 800517a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	4b28      	ldr	r3, [pc, #160]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005194:	429a      	cmp	r2, r3
 8005196:	d208      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4922      	ldr	r1, [pc, #136]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d010      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d208      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	4917      	ldr	r1, [pc, #92]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051d8:	f000 f834 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 80051dc:	4601      	mov	r1, r0
 80051de:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	4a12      	ldr	r2, [pc, #72]	; (8005234 <HAL_RCC_ClockConfig+0x35c>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa21 f303 	lsr.w	r3, r1, r3
 80051f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCC_ClockConfig+0x358>)
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	4a0d      	ldr	r2, [pc, #52]	; (8005234 <HAL_RCC_ClockConfig+0x35c>)
 8005200:	5cd3      	ldrb	r3, [r2, r3]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x360>)
 800520e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005210:	4a0a      	ldr	r2, [pc, #40]	; (800523c <HAL_RCC_ClockConfig+0x364>)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCC_ClockConfig+0x368>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fc fca2 	bl	8001b64 <HAL_InitTick>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	0800b32c 	.word	0x0800b32c
 8005238:	24000004 	.word	0x24000004
 800523c:	24000000 	.word	0x24000000
 8005240:	24000008 	.word	0x24000008

08005244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005244:	b480      	push	{r7}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524a:	4baf      	ldr	r3, [pc, #700]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005252:	2b18      	cmp	r3, #24
 8005254:	f200 814e 	bhi.w	80054f4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <HAL_RCC_GetSysClockFreq+0x1c>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	080052c5 	.word	0x080052c5
 8005264:	080054f5 	.word	0x080054f5
 8005268:	080054f5 	.word	0x080054f5
 800526c:	080054f5 	.word	0x080054f5
 8005270:	080054f5 	.word	0x080054f5
 8005274:	080054f5 	.word	0x080054f5
 8005278:	080054f5 	.word	0x080054f5
 800527c:	080054f5 	.word	0x080054f5
 8005280:	080052eb 	.word	0x080052eb
 8005284:	080054f5 	.word	0x080054f5
 8005288:	080054f5 	.word	0x080054f5
 800528c:	080054f5 	.word	0x080054f5
 8005290:	080054f5 	.word	0x080054f5
 8005294:	080054f5 	.word	0x080054f5
 8005298:	080054f5 	.word	0x080054f5
 800529c:	080054f5 	.word	0x080054f5
 80052a0:	080052f1 	.word	0x080052f1
 80052a4:	080054f5 	.word	0x080054f5
 80052a8:	080054f5 	.word	0x080054f5
 80052ac:	080054f5 	.word	0x080054f5
 80052b0:	080054f5 	.word	0x080054f5
 80052b4:	080054f5 	.word	0x080054f5
 80052b8:	080054f5 	.word	0x080054f5
 80052bc:	080054f5 	.word	0x080054f5
 80052c0:	080052f7 	.word	0x080052f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c4:	4b90      	ldr	r3, [pc, #576]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052d0:	4b8d      	ldr	r3, [pc, #564]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	4a8c      	ldr	r2, [pc, #560]	; (800550c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80052e2:	e10a      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052e4:	4b89      	ldr	r3, [pc, #548]	; (800550c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80052e6:	61bb      	str	r3, [r7, #24]
    break;
 80052e8:	e107      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052ea:	4b89      	ldr	r3, [pc, #548]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80052ec:	61bb      	str	r3, [r7, #24]
    break;
 80052ee:	e104      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80052f0:	4b88      	ldr	r3, [pc, #544]	; (8005514 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80052f2:	61bb      	str	r3, [r7, #24]
    break;
 80052f4:	e101      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052f6:	4b84      	ldr	r3, [pc, #528]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005300:	4b81      	ldr	r3, [pc, #516]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800530c:	4b7e      	ldr	r3, [pc, #504]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005316:	4b7c      	ldr	r3, [pc, #496]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80da 	beq.w	80054ee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d05a      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005340:	2b01      	cmp	r3, #1
 8005342:	d302      	bcc.n	800534a <HAL_RCC_GetSysClockFreq+0x106>
 8005344:	2b02      	cmp	r3, #2
 8005346:	d078      	beq.n	800543a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005348:	e099      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800534a:	4b6f      	ldr	r3, [pc, #444]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02d      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005356:	4b6c      	ldr	r3, [pc, #432]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	4a6a      	ldr	r2, [pc, #424]	; (800550c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005380:	4b61      	ldr	r3, [pc, #388]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005390:	ed97 6a02 	vldr	s12, [r7, #8]
 8005394:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80053b0:	e087      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053bc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800551c <HAL_RCC_GetSysClockFreq+0x2d8>
 80053c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2d4>
 80053dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f4:	e065      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005400:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005408:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005418:	ed97 6a02 	vldr	s12, [r7, #8]
 800541c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005438:	e043      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005444:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005524 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005460:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005478:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547c:	e021      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005488:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2dc>
 800548c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2d4>
 80054a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	0a5b      	lsrs	r3, r3, #9
 80054c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054cc:	3301      	adds	r3, #1
 80054ce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054da:	edd7 6a07 	vldr	s13, [r7, #28]
 80054de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e6:	ee17 3a90 	vmov	r3, s15
 80054ea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80054ec:	e005      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
    break;
 80054f2:	e002      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80054f6:	61bb      	str	r3, [r7, #24]
    break;
 80054f8:	bf00      	nop
  }

  return sysclockfreq;
 80054fa:	69bb      	ldr	r3, [r7, #24]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3724      	adds	r7, #36	; 0x24
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	58024400 	.word	0x58024400
 800550c:	03d09000 	.word	0x03d09000
 8005510:	003d0900 	.word	0x003d0900
 8005514:	017d7840 	.word	0x017d7840
 8005518:	46000000 	.word	0x46000000
 800551c:	4c742400 	.word	0x4c742400
 8005520:	4a742400 	.word	0x4a742400
 8005524:	4bbebc20 	.word	0x4bbebc20

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800552e:	f7ff fe89 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 8005532:	4601      	mov	r1, r0
 8005534:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCC_GetHCLKFreq+0x50>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	4a0f      	ldr	r2, [pc, #60]	; (800557c <HAL_RCC_GetHCLKFreq+0x54>)
 8005540:	5cd3      	ldrb	r3, [r2, r3]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	fa21 f303 	lsr.w	r3, r1, r3
 800554a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_RCC_GetHCLKFreq+0x50>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_RCC_GetHCLKFreq+0x54>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <HAL_RCC_GetHCLKFreq+0x58>)
 8005564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_RCC_GetHCLKFreq+0x58>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	58024400 	.word	0x58024400
 800557c:	0800b32c 	.word	0x0800b32c
 8005580:	24000004 	.word	0x24000004
 8005584:	24000000 	.word	0x24000000

08005588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800558c:	f7ff ffcc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005590:	4601      	mov	r1, r0
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800559e:	5cd3      	ldrb	r3, [r2, r3]
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	58024400 	.word	0x58024400
 80055b0:	0800b32c 	.word	0x0800b32c

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055b8:	f7ff ffb6 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 80055bc:	4601      	mov	r1, r0
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4a04      	ldr	r2, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ca:	5cd3      	ldrb	r3, [r2, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	58024400 	.word	0x58024400
 80055dc:	0800b32c 	.word	0x0800b32c

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03d      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	d013      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d802      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005610:	e01f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005616:	d013      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800561c:	d01c      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800561e:	e018      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005620:	4baf      	ldr	r3, [pc, #700]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4aae      	ldr	r2, [pc, #696]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800562c:	e015      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	2102      	movs	r1, #2
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fd33 	bl	80070a0 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800563e:	e00c      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	2102      	movs	r1, #2
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fddc 	bl	8007204 <RCCEx_PLL3_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005660:	4b9f      	ldr	r3, [pc, #636]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566c:	499c      	ldr	r1, [pc, #624]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800566e:	4313      	orrs	r3, r2
 8005670:	650b      	str	r3, [r1, #80]	; 0x50
 8005672:	e001      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03d      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	2b04      	cmp	r3, #4
 800568a:	d826      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800568c:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056b7 	.word	0x080056b7
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	080056e1 	.word	0x080056e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4b8d      	ldr	r3, [pc, #564]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4a8c      	ldr	r2, [pc, #560]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056b4:	e015      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 fcef 	bl	80070a0 <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056c6:	e00c      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3324      	adds	r3, #36	; 0x24
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fd98 	bl	8007204 <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80056e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e8:	4b7d      	ldr	r3, [pc, #500]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	f023 0207 	bic.w	r2, r3, #7
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	497a      	ldr	r1, [pc, #488]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	650b      	str	r3, [r1, #80]	; 0x50
 80056fa:	e001      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005708:	2b00      	cmp	r3, #0
 800570a:	d03e      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d01c      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d804      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d00d      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005720:	e01e      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005722:	2bc0      	cmp	r3, #192	; 0xc0
 8005724:	d01f      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d01e      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800572c:	e018      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4b6c      	ldr	r3, [pc, #432]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	4a6b      	ldr	r2, [pc, #428]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800573a:	e017      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f001 fcac 	bl	80070a0 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800574c:	e00e      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3324      	adds	r3, #36	; 0x24
 8005752:	2100      	movs	r1, #0
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fd55 	bl	8007204 <RCCEx_PLL3_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800575e:	e005      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
      break;
 8005764:	e002      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800576a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005772:	4b5b      	ldr	r3, [pc, #364]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577e:	4958      	ldr	r1, [pc, #352]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005780:	4313      	orrs	r3, r2
 8005782:	650b      	str	r3, [r1, #80]	; 0x50
 8005784:	e001      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	2b00      	cmp	r3, #0
 8005794:	d044      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800579c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a0:	d01f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80057a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a6:	d805      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057b0:	d00e      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80057b2:	e01f      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80057b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057b8:	d01f      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80057ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057be:	d01e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057c0:	e018      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c2:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	4a46      	ldr	r2, [pc, #280]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057ce:	e017      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fc62 	bl	80070a0 <RCCEx_PLL2_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057e0:	e00e      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3324      	adds	r3, #36	; 0x24
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fd0b 	bl	8007204 <RCCEx_PLL3_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057f2:	e005      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
      break;
 80057f8:	e002      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80057fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005806:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005814:	4932      	ldr	r1, [pc, #200]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005816:	4313      	orrs	r3, r2
 8005818:	658b      	str	r3, [r1, #88]	; 0x58
 800581a:	e001      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005828:	2b00      	cmp	r3, #0
 800582a:	d044      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005836:	d01f      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800583c:	d805      	bhi.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005846:	d00e      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005848:	e01f      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800584a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800584e:	d01f      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005854:	d01e      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005856:	e018      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800585e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005864:	e017      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fc17 	bl	80070a0 <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005876:	e00e      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3324      	adds	r3, #36	; 0x24
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fcc0 	bl	8007204 <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005888:	e005      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	e002      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058aa:	490d      	ldr	r1, [pc, #52]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	658b      	str	r3, [r1, #88]	; 0x58
 80058b0:	e001      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d035      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d00c      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d802      	bhi.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80058d2:	e017      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d00c      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d018      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80058dc:	e012      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e4:	4baf      	ldr	r3, [pc, #700]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	4aae      	ldr	r2, [pc, #696]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80058f0:	e00e      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3304      	adds	r3, #4
 80058f6:	2102      	movs	r1, #2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fbd1 	bl	80070a0 <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005902:	e005      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800590e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005916:	4ba3      	ldr	r3, [pc, #652]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005922:	49a0      	ldr	r1, [pc, #640]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d042      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005942:	d01f      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005948:	d805      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005952:	d00e      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005954:	e01f      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800595a:	d01f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005960:	d01e      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005962:	e018      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005964:	4b8f      	ldr	r3, [pc, #572]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a8e      	ldr	r2, [pc, #568]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800596a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005970:	e017      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f001 fb91 	bl	80070a0 <RCCEx_PLL2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005982:	e00e      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3324      	adds	r3, #36	; 0x24
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fc3a 	bl	8007204 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005994:	e005      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
      break;
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80059a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059a8:	4b7e      	ldr	r3, [pc, #504]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	497b      	ldr	r1, [pc, #492]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	650b      	str	r3, [r1, #80]	; 0x50
 80059ba:	e001      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d042      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d4:	d01b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80059d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059da:	d805      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d022      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80059e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059e6:	e01b      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80059e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ec:	d01d      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80059ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f2:	d01c      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80059f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059f8:	d01b      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80059fa:	e011      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fb4c 	bl	80070a0 <RCCEx_PLL2_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e012      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3324      	adds	r3, #36	; 0x24
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fbf5 	bl	8007204 <RCCEx_PLL3_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a1e:	e009      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e006      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005a26:	bf00      	nop
 8005a28:	e004      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a3a:	4b5a      	ldr	r3, [pc, #360]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	4957      	ldr	r1, [pc, #348]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	650b      	str	r3, [r1, #80]	; 0x50
 8005a4c:	e001      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d044      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a68:	d01b      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6e:	d805      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d022      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a7a:	e01b      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d01d      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a86:	d01c      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005a88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a8c:	d01b      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a8e:	e011      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fb02 	bl	80070a0 <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005aa0:	e012      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3324      	adds	r3, #36	; 0x24
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fbab 	bl	8007204 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ab2:	e009      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e006      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005aba:	bf00      	nop
 8005abc:	e004      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ace:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005adc:	4931      	ldr	r1, [pc, #196]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ae2:	e001      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02d      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afc:	d005      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b02:	d009      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d013      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005b08:	e00f      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0a:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b16:	e00c      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fabe 	bl	80070a0 <RCCEx_PLL2_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b38:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b44:	4917      	ldr	r1, [pc, #92]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	650b      	str	r3, [r1, #80]	; 0x50
 8005b4a:	e001      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d035      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d81b      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005b7d 	.word	0x08005b7d
 8005b74:	08005b8b 	.word	0x08005b8b
 8005b78:	08005ba9 	.word	0x08005ba9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fa85 	bl	80070a0 <RCCEx_PLL2_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b9a:	e006      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005ba2:	bf00      	nop
 8005ba4:	58024400 	.word	0x58024400
      break;
 8005ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bb0:	4bba      	ldr	r3, [pc, #744]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb4:	f023 0203 	bic.w	r2, r3, #3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	49b7      	ldr	r1, [pc, #732]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bc2:	e001      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8086 	beq.w	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd6:	4bb2      	ldr	r3, [pc, #712]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4ab1      	ldr	r2, [pc, #708]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be2:	f7fc f809 	bl	8001bf8 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be8:	e009      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fc f805 	bl	8001bf8 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b64      	cmp	r3, #100	; 0x64
 8005bf6:	d902      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8005bfc:	e005      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bfe:	4ba8      	ldr	r3, [pc, #672]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d166      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c10:	4ba2      	ldr	r3, [pc, #648]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c1a:	4053      	eors	r3, r2
 8005c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c24:	4b9d      	ldr	r3, [pc, #628]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2e:	4b9b      	ldr	r3, [pc, #620]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a9a      	ldr	r2, [pc, #616]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3a:	4b98      	ldr	r3, [pc, #608]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a97      	ldr	r2, [pc, #604]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c46:	4a95      	ldr	r2, [pc, #596]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d115      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fb ffce 	bl	8001bf8 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fb ffca 	bl	8001bf8 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d902      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	75fb      	strb	r3, [r7, #23]
            break;
 8005c76:	e005      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c78:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ed      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d126      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005c9a:	4b80      	ldr	r3, [pc, #512]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ca8:	0919      	lsrs	r1, r3, #4
 8005caa:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005cac:	400b      	ands	r3, r1
 8005cae:	497b      	ldr	r1, [pc, #492]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	610b      	str	r3, [r1, #16]
 8005cb4:	e005      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005cb6:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	4a78      	ldr	r2, [pc, #480]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005cbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cc0:	6113      	str	r3, [r2, #16]
 8005cc2:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005cc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd0:	4972      	ldr	r1, [pc, #456]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	670b      	str	r3, [r1, #112]	; 0x70
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	75bb      	strb	r3, [r7, #22]
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d07d      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf2:	2b28      	cmp	r3, #40	; 0x28
 8005cf4:	d866      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005dcb 	.word	0x08005dcb
 8005d00:	08005dc5 	.word	0x08005dc5
 8005d04:	08005dc5 	.word	0x08005dc5
 8005d08:	08005dc5 	.word	0x08005dc5
 8005d0c:	08005dc5 	.word	0x08005dc5
 8005d10:	08005dc5 	.word	0x08005dc5
 8005d14:	08005dc5 	.word	0x08005dc5
 8005d18:	08005dc5 	.word	0x08005dc5
 8005d1c:	08005da1 	.word	0x08005da1
 8005d20:	08005dc5 	.word	0x08005dc5
 8005d24:	08005dc5 	.word	0x08005dc5
 8005d28:	08005dc5 	.word	0x08005dc5
 8005d2c:	08005dc5 	.word	0x08005dc5
 8005d30:	08005dc5 	.word	0x08005dc5
 8005d34:	08005dc5 	.word	0x08005dc5
 8005d38:	08005dc5 	.word	0x08005dc5
 8005d3c:	08005db3 	.word	0x08005db3
 8005d40:	08005dc5 	.word	0x08005dc5
 8005d44:	08005dc5 	.word	0x08005dc5
 8005d48:	08005dc5 	.word	0x08005dc5
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005dc5 	.word	0x08005dc5
 8005d5c:	08005dcb 	.word	0x08005dcb
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005dc5 	.word	0x08005dc5
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005dc5 	.word	0x08005dc5
 8005d7c:	08005dcb 	.word	0x08005dcb
 8005d80:	08005dc5 	.word	0x08005dc5
 8005d84:	08005dc5 	.word	0x08005dc5
 8005d88:	08005dc5 	.word	0x08005dc5
 8005d8c:	08005dc5 	.word	0x08005dc5
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005dc5 	.word	0x08005dc5
 8005d98:	08005dc5 	.word	0x08005dc5
 8005d9c:	08005dcb 	.word	0x08005dcb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 f97a 	bl	80070a0 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005db0:	e00c      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2101      	movs	r1, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fa23 	bl	8007204 <RCCEx_PLL3_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005dd2:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dde:	492f      	ldr	r1, [pc, #188]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	654b      	str	r3, [r1, #84]	; 0x54
 8005de4:	e001      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d037      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d820      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e47 	.word	0x08005e47
 8005e08:	08005e1d 	.word	0x08005e1d
 8005e0c:	08005e2f 	.word	0x08005e2f
 8005e10:	08005e47 	.word	0x08005e47
 8005e14:	08005e47 	.word	0x08005e47
 8005e18:	08005e47 	.word	0x08005e47
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2101      	movs	r1, #1
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 f93c 	bl	80070a0 <RCCEx_PLL2_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3324      	adds	r3, #36	; 0x24
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 f9e5 	bl	8007204 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
      break;
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f023 0207 	bic.w	r2, r3, #7
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5a:	4910      	ldr	r1, [pc, #64]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	654b      	str	r3, [r1, #84]	; 0x54
 8005e60:	e001      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d040      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d827      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ed3 	.word	0x08005ed3
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005ebb 	.word	0x08005ebb
 8005e90:	08005ed3 	.word	0x08005ed3
 8005e94:	08005ed3 	.word	0x08005ed3
 8005e98:	08005ed3 	.word	0x08005ed3
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	58024800 	.word	0x58024800
 8005ea4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	2101      	movs	r1, #1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 f8f6 	bl	80070a0 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005eb8:	e00c      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3324      	adds	r3, #36	; 0x24
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 f99f 	bl	8007204 <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005eca:	e003      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eda:	4bb2      	ldr	r3, [pc, #712]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ede:	f023 0207 	bic.w	r2, r3, #7
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	49ae      	ldr	r1, [pc, #696]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	658b      	str	r3, [r1, #88]	; 0x58
 8005eee:	e001      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d044      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d01b      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f10:	d805      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d022      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005f1c:	e01b      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d01d      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f28:	d01c      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f2e:	d01b      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005f30:	e011      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 f8b1 	bl	80070a0 <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f42:	e012      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	2102      	movs	r1, #2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f95a 	bl	8007204 <RCCEx_PLL3_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f54:	e009      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5a:	e006      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005f5c:	bf00      	nop
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f70:	4b8c      	ldr	r3, [pc, #560]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7e:	4989      	ldr	r1, [pc, #548]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	654b      	str	r3, [r1, #84]	; 0x54
 8005f84:	e001      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d044      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa0:	d01b      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa6:	d805      	bhi.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d022      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005fb2:	e01b      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005fba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fbe:	d01c      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc4:	d01b      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005fc6:	e011      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f866 	bl	80070a0 <RCCEx_PLL2_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fd8:	e012      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3324      	adds	r3, #36	; 0x24
 8005fde:	2102      	movs	r1, #2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 f90f 	bl	8007204 <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fea:	e009      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e006      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e004      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006006:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006014:	4963      	ldr	r1, [pc, #396]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	658b      	str	r3, [r1, #88]	; 0x58
 800601a:	e001      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d044      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006036:	d01b      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603c:	d805      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d022      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006048:	e01b      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d01d      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006050:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006054:	d01c      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006056:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800605a:	d01b      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800605c:	e011      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f81b 	bl	80070a0 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800606e:	e012      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	2102      	movs	r1, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f8c4 	bl	8007204 <RCCEx_PLL3_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006080:	e009      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
      break;
 8006086:	e006      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006088:	bf00      	nop
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800608c:	bf00      	nop
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800609c:	4b41      	ldr	r3, [pc, #260]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060aa:	493e      	ldr	r1, [pc, #248]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	658b      	str	r3, [r1, #88]	; 0x58
 80060b0:	e001      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060cc:	d10a      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3324      	adds	r3, #36	; 0x24
 80060d2:	2102      	movs	r1, #2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f895 	bl	8007204 <RCCEx_PLL3_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060e4:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f2:	492c      	ldr	r1, [pc, #176]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800610a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610e:	d10a      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	2102      	movs	r1, #2
 8006116:	4618      	mov	r0, r3
 8006118:	f001 f874 	bl	8007204 <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006126:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006134:	491b      	ldr	r1, [pc, #108]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d032      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d00d      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006156:	d016      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d111      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f000 ff9c 	bl	80070a0 <RCCEx_PLL2_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800616c:	e00c      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	2102      	movs	r1, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f001 f845 	bl	8007204 <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800617e:	e003      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
      break;
 8006184:	e000      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800619c:	4901      	ldr	r1, [pc, #4]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	658b      	str	r3, [r1, #88]	; 0x58
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80061a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02f      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c2:	d00c      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d015      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ce:	d10f      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b79      	ldr	r3, [pc, #484]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a78      	ldr	r2, [pc, #480]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061dc:	e00c      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f80d 	bl	8007204 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80061f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061fe:	4b6e      	ldr	r3, [pc, #440]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620c:	496a      	ldr	r1, [pc, #424]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800620e:	4313      	orrs	r3, r2
 8006210:	654b      	str	r3, [r1, #84]	; 0x54
 8006212:	e001      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d029      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d007      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006232:	e00f      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4a5f      	ldr	r2, [pc, #380]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006240:	e00b      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2102      	movs	r1, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f000 ff29 	bl	80070a0 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006252:	e002      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006260:	4b55      	ldr	r3, [pc, #340]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626c:	4952      	ldr	r1, [pc, #328]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800626e:	4313      	orrs	r3, r2
 8006270:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006272:	e001      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	2102      	movs	r1, #2
 800628a:	4618      	mov	r0, r3
 800628c:	f000 ffba 	bl	8007204 <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d02f      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ae:	d00c      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b4:	d802      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d011      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80062ba:	e00d      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80062bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c0:	d00f      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c6:	d00e      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80062c8:	e006      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ca:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	4a3a      	ldr	r2, [pc, #232]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80062d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062d6:	e007      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	e004      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80062e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ee:	4b32      	ldr	r3, [pc, #200]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fa:	492f      	ldr	r1, [pc, #188]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006300:	e001      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4926      	ldr	r1, [pc, #152]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006320:	4313      	orrs	r3, r2
 8006322:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006330:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800633e:	491e      	ldr	r1, [pc, #120]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635c:	4916      	ldr	r1, [pc, #88]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800635e:	4313      	orrs	r3, r2
 8006360:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006378:	6113      	str	r3, [r2, #16]
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006384:	490c      	ldr	r1, [pc, #48]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da08      	bge.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	4906      	ldr	r1, [pc, #24]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80063a4:	7dbb      	ldrb	r3, [r7, #22]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	58024400 	.word	0x58024400

080063bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b090      	sub	sp, #64	; 0x40
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d150      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80063cc:	4ba1      	ldr	r3, [pc, #644]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d844      	bhi.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	080063f9 	.word	0x080063f9
 80063e8:	08006409 	.word	0x08006409
 80063ec:	08006419 	.word	0x08006419
 80063f0:	08006461 	.word	0x08006461
 80063f4:	08006429 	.word	0x08006429
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fd03 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006406:	e241      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006408:	f107 0318 	add.w	r3, r7, #24
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa63 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006416:	e239      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006418:	f107 030c 	add.w	r3, r7, #12
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fba7 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006426:	e231      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006428:	4b8a      	ldr	r3, [pc, #552]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800642a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006430:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006438:	4b87      	ldr	r3, [pc, #540]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800643c:	e226      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006446:	4b85      	ldr	r3, [pc, #532]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800644a:	e21f      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006452:	d102      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006454:	4b82      	ldr	r3, [pc, #520]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006458:	e218      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800645e:	e215      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006460:	4b80      	ldr	r3, [pc, #512]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006464:	e212      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800646a:	bf00      	nop
 800646c:	e20e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d14f      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006476:	4b77      	ldr	r3, [pc, #476]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800647e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d01c      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d804      	bhi.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d00e      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006492:	e03c      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006494:	2bc0      	cmp	r3, #192	; 0xc0
 8006496:	d037      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649c:	d018      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800649e:	e036      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fcaf 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ae:	e1ed      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fa0f 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064be:	e1e5      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fb53 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ce:	e1dd      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064d0:	4b60      	ldr	r3, [pc, #384]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80064d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80064e0:	4b5d      	ldr	r3, [pc, #372]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80064e4:	e1d2      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ec:	d102      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80064ee:	4b5b      	ldr	r3, [pc, #364]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064f2:	e1cb      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fa:	d102      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80064fc:	4b58      	ldr	r3, [pc, #352]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006500:	e1c4      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006506:	e1c1      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006508:	4b56      	ldr	r3, [pc, #344]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800650c:	e1be      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006512:	bf00      	nop
 8006514:	e1ba      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651c:	d153      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800651e:	4b4d      	ldr	r3, [pc, #308]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006526:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652e:	d01f      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006534:	d805      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800653a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800653e:	d00f      	beq.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006540:	e03d      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006546:	d037      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800654c:	d018      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800654e:	e036      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fc57 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800655e:	e195      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006560:	f107 0318 	add.w	r3, r7, #24
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f9b7 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800656e:	e18d      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fafb 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800657e:	e185      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006580:	4b34      	ldr	r3, [pc, #208]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006588:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006590:	4b31      	ldr	r3, [pc, #196]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006594:	e17a      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659c:	d102      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065a2:	e173      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065aa:	d102      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80065ac:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b0:	e16c      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b6:	e169      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065bc:	e166      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c2:	bf00      	nop
 80065c4:	e162      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065cc:	d15d      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80065ce:	4b21      	ldr	r3, [pc, #132]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065de:	d01f      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80065e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065e4:	d805      	bhi.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80065ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ee:	d00f      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80065f0:	e047      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80065f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065f6:	d041      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80065f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065fc:	d018      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80065fe:	e040      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fbff 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660e:	e13d      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006610:	f107 0318 	add.w	r3, r7, #24
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f95f 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661e:	e135      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	4618      	mov	r0, r3
 8006626:	f000 faa3 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800662e:	e12d      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006638:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006644:	e122      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006652:	e11b      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006654:	58024400 	.word	0x58024400
 8006658:	03d09000 	.word	0x03d09000
 800665c:	003d0900 	.word	0x003d0900
 8006660:	017d7840 	.word	0x017d7840
 8006664:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666e:	d102      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006670:	4b89      	ldr	r3, [pc, #548]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006674:	e10a      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667a:	e107      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800667c:	4b87      	ldr	r3, [pc, #540]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006680:	e104      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006686:	bf00      	nop
 8006688:	e100      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006690:	d153      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006692:	4b83      	ldr	r3, [pc, #524]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a2:	d01f      	beq.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80066a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a8:	d805      	bhi.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b2:	d00f      	beq.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80066b4:	e03d      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80066b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ba:	d037      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80066bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c0:	d018      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80066c2:	e036      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fb9d 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d2:	e0db      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d4:	f107 0318 	add.w	r3, r7, #24
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f8fd 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e2:	e0d3      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e4:	f107 030c 	add.w	r3, r7, #12
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fa41 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f2:	e0cb      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066f4:	4b6a      	ldr	r3, [pc, #424]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80066f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006704:	4b67      	ldr	r3, [pc, #412]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006708:	e0c0      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006710:	d102      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006716:	e0b9      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006720:	4b5d      	ldr	r3, [pc, #372]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006724:	e0b2      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672a:	e0af      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800672c:	4b5b      	ldr	r3, [pc, #364]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006730:	e0ac      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006736:	bf00      	nop
 8006738:	e0a8      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006740:	d13d      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006742:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800674a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006752:	d00c      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006758:	d011      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d12b      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675e:	f107 0318 	add.w	r3, r7, #24
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f8b8 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800676c:	e08e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676e:	f107 030c 	add.w	r3, r7, #12
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f9fc 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800677c:	e086      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800677e:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006786:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800678e:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006792:	e07b      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679a:	d102      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800679c:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a0:	e074      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80067a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a8:	d102      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80067aa:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ae:	e06d      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b4:	e06a      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ba:	bf00      	nop
 80067bc:	e066      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d11f      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80067c6:	4b36      	ldr	r3, [pc, #216]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d008      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80067dc:	e00f      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb10 	bl	8006e08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ec:	e04e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f870 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fc:	e046      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006802:	bf00      	nop
 8006804:	e042      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680c:	d13c      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681e:	d01e      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8006820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006824:	d805      	bhi.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800682e:	d00e      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006830:	e026      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006836:	d01d      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800683c:	d01d      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800683e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006842:	d014      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006844:	e01c      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006846:	f000 f831 	bl	80068ac <HAL_RCCEx_GetD3PCLK1Freq>
 800684a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800684c:	e01e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684e:	f107 0318 	add.w	r3, r7, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f840 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685c:	e016      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f984 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686c:	e00e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006872:	e00b      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006878:	e008      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800687e:	e005      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006884:	bf00      	nop
 8006886:	e001      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800688c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800688e:	4618      	mov	r0, r3
 8006890:	3740      	adds	r7, #64	; 0x40
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	017d7840 	.word	0x017d7840
 800689c:	00bb8000 	.word	0x00bb8000
 80068a0:	58024400 	.word	0x58024400
 80068a4:	03d09000 	.word	0x03d09000
 80068a8:	003d0900 	.word	0x003d0900

080068ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068b0:	f7fe fe3a 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 80068b4:	4601      	mov	r1, r0
 80068b6:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	58024400 	.word	0x58024400
 80068d4:	0800b32c 	.word	0x0800b32c

080068d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068e0:	4b9d      	ldr	r3, [pc, #628]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80068ea:	4b9b      	ldr	r3, [pc, #620]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	0b1b      	lsrs	r3, r3, #12
 80068f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068f6:	4b98      	ldr	r3, [pc, #608]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	091b      	lsrs	r3, r3, #4
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006902:	4b95      	ldr	r3, [pc, #596]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	08db      	lsrs	r3, r3, #3
 8006908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 810a 	beq.w	8006b3a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d05a      	beq.n	80069e2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800692c:	2b01      	cmp	r3, #1
 800692e:	d302      	bcc.n	8006936 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006930:	2b02      	cmp	r3, #2
 8006932:	d078      	beq.n	8006a26 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006934:	e099      	b.n	8006a6a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006936:	4b88      	ldr	r3, [pc, #544]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d02d      	beq.n	800699e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006942:	4b85      	ldr	r3, [pc, #532]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	4a83      	ldr	r2, [pc, #524]	; (8006b5c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696c:	4b7a      	ldr	r3, [pc, #488]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006980:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006998:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800699c:	e087      	b.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80069ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b0:	4b69      	ldr	r3, [pc, #420]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80069c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069e0:	e065      	b.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80069f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f4:	4b58      	ldr	r3, [pc, #352]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a04:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a08:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a24:	e043      	b.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006b6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a38:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a68:	e021      	b.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7c:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a90:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aac:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006aae:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad4:	ee17 2a90 	vmov	r2, s15
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006adc:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b02:	ee17 2a90 	vmov	r2, s15
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b30:	ee17 2a90 	vmov	r2, s15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b38:	e008      	b.n	8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	3724      	adds	r7, #36	; 0x24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	03d09000 	.word	0x03d09000
 8006b60:	46000000 	.word	0x46000000
 8006b64:	4c742400 	.word	0x4c742400
 8006b68:	4a742400 	.word	0x4a742400
 8006b6c:	4bbebc20 	.word	0x4bbebc20

08006b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b089      	sub	sp, #36	; 0x24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b78:	4b9d      	ldr	r3, [pc, #628]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b82:	4b9b      	ldr	r3, [pc, #620]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	0d1b      	lsrs	r3, r3, #20
 8006b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b8e:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b9a:	4b95      	ldr	r3, [pc, #596]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	08db      	lsrs	r3, r3, #3
 8006ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 810a 	beq.w	8006dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d05a      	beq.n	8006c7a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d302      	bcc.n	8006bce <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d078      	beq.n	8006cbe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006bcc:	e099      	b.n	8006d02 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bce:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d02d      	beq.n	8006c36 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bda:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	4a83      	ldr	r2, [pc, #524]	; (8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006be6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bea:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c04:	4b7a      	ldr	r3, [pc, #488]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c18:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c30:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c34:	e087      	b.n	8006d46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006dfc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c48:	4b69      	ldr	r3, [pc, #420]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c78:	e065      	b.n	8006d46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8c:	4b58      	ldr	r3, [pc, #352]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cbc:	e043      	b.n	8006d46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd0:	4b47      	ldr	r3, [pc, #284]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ce4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d00:	e021      	b.n	8006d46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d14:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d44:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	0a5b      	lsrs	r3, r3, #9
 8006d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6c:	ee17 2a90 	vmov	r2, s15
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9a:	ee17 2a90 	vmov	r2, s15
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	0e1b      	lsrs	r3, r3, #24
 8006da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc8:	ee17 2a90 	vmov	r2, s15
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006dd0:	e008      	b.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	3724      	adds	r7, #36	; 0x24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	58024400 	.word	0x58024400
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	46000000 	.word	0x46000000
 8006dfc:	4c742400 	.word	0x4c742400
 8006e00:	4a742400 	.word	0x4a742400
 8006e04:	4bbebc20 	.word	0x4bbebc20

08006e08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b089      	sub	sp, #36	; 0x24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e10:	4b9d      	ldr	r3, [pc, #628]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006e1a:	4b9b      	ldr	r3, [pc, #620]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	091b      	lsrs	r3, r3, #4
 8006e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006e26:	4b98      	ldr	r3, [pc, #608]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e30:	4b95      	ldr	r3, [pc, #596]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 810a 	beq.w	8007068 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d05a      	beq.n	8006f10 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d302      	bcc.n	8006e64 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d078      	beq.n	8006f54 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006e62:	e099      	b.n	8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e64:	4b88      	ldr	r3, [pc, #544]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02d      	beq.n	8006ecc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e70:	4b85      	ldr	r3, [pc, #532]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a84      	ldr	r2, [pc, #528]	; (800708c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b7b      	ldr	r3, [pc, #492]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006eca:	e087      	b.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007094 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ede:	4b6a      	ldr	r3, [pc, #424]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f0e:	e065      	b.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007098 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b59      	ldr	r3, [pc, #356]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f52:	e043      	b.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800709c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b48      	ldr	r3, [pc, #288]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f96:	e021      	b.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007098 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b37      	ldr	r3, [pc, #220]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fda:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006fdc:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	0a5b      	lsrs	r3, r3, #9
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007002:	ee17 2a90 	vmov	r2, s15
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800700a:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007024:	edd7 6a07 	vldr	s13, [r7, #28]
 8007028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007030:	ee17 2a90 	vmov	r2, s15
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007052:	edd7 6a07 	vldr	s13, [r7, #28]
 8007056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705e:	ee17 2a90 	vmov	r2, s15
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007066:	e008      	b.n	800707a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
}
 800707a:	bf00      	nop
 800707c:	3724      	adds	r7, #36	; 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	58024400 	.word	0x58024400
 800708c:	03d09000 	.word	0x03d09000
 8007090:	46000000 	.word	0x46000000
 8007094:	4c742400 	.word	0x4c742400
 8007098:	4a742400 	.word	0x4a742400
 800709c:	4bbebc20 	.word	0x4bbebc20

080070a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070ae:	4b53      	ldr	r3, [pc, #332]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d101      	bne.n	80070be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e099      	b.n	80071f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070be:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a4e      	ldr	r2, [pc, #312]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80070c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ca:	f7fa fd95 	bl	8001bf8 <HAL_GetTick>
 80070ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d0:	e008      	b.n	80070e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80070d2:	f7fa fd91 	bl	8001bf8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e086      	b.n	80071f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070e4:	4b45      	ldr	r3, [pc, #276]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f0      	bne.n	80070d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070f0:	4b42      	ldr	r3, [pc, #264]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	031b      	lsls	r3, r3, #12
 80070fe:	493f      	ldr	r1, [pc, #252]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	628b      	str	r3, [r1, #40]	; 0x28
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	3b01      	subs	r3, #1
 800710a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	3b01      	subs	r3, #1
 8007114:	025b      	lsls	r3, r3, #9
 8007116:	b29b      	uxth	r3, r3
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	3b01      	subs	r3, #1
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	3b01      	subs	r3, #1
 800712e:	061b      	lsls	r3, r3, #24
 8007130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007134:	4931      	ldr	r1, [pc, #196]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	492d      	ldr	r1, [pc, #180]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800714c:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	f023 0220 	bic.w	r2, r3, #32
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 800715a:	4313      	orrs	r3, r2
 800715c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800715e:	4b27      	ldr	r3, [pc, #156]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007164:	f023 0310 	bic.w	r3, r3, #16
 8007168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 800716c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <RCCEx_PLL2_Config+0x160>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	69d2      	ldr	r2, [r2, #28]
 8007176:	00d2      	lsls	r2, r2, #3
 8007178:	4920      	ldr	r1, [pc, #128]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800717e:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007184:	f043 0310 	orr.w	r3, r3, #16
 8007188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007190:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a19      	ldr	r2, [pc, #100]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 8007196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800719c:	e00f      	b.n	80071be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d106      	bne.n	80071b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071a4:	4b15      	ldr	r3, [pc, #84]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4a14      	ldr	r2, [pc, #80]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071b0:	e005      	b.n	80071be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	4a11      	ldr	r2, [pc, #68]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ca:	f7fa fd15 	bl	8001bf8 <HAL_GetTick>
 80071ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d0:	e008      	b.n	80071e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80071d2:	f7fa fd11 	bl	8001bf8 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e006      	b.n	80071f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <RCCEx_PLL2_Config+0x15c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
 8007200:	ffff0007 	.word	0xffff0007

08007204 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007212:	4b53      	ldr	r3, [pc, #332]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b03      	cmp	r3, #3
 800721c:	d101      	bne.n	8007222 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e099      	b.n	8007356 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007222:	4b4f      	ldr	r3, [pc, #316]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a4e      	ldr	r2, [pc, #312]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722e:	f7fa fce3 	bl	8001bf8 <HAL_GetTick>
 8007232:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007234:	e008      	b.n	8007248 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007236:	f7fa fcdf 	bl	8001bf8 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e086      	b.n	8007356 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007248:	4b45      	ldr	r3, [pc, #276]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f0      	bne.n	8007236 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007254:	4b42      	ldr	r3, [pc, #264]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	051b      	lsls	r3, r3, #20
 8007262:	493f      	ldr	r1, [pc, #252]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007264:	4313      	orrs	r3, r2
 8007266:	628b      	str	r3, [r1, #40]	; 0x28
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	3b01      	subs	r3, #1
 800726e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	3b01      	subs	r3, #1
 8007278:	025b      	lsls	r3, r3, #9
 800727a:	b29b      	uxth	r3, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	3b01      	subs	r3, #1
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	3b01      	subs	r3, #1
 8007292:	061b      	lsls	r3, r3, #24
 8007294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007298:	4931      	ldr	r1, [pc, #196]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800729e:	4b30      	ldr	r3, [pc, #192]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	492d      	ldr	r1, [pc, #180]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072b0:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	4928      	ldr	r1, [pc, #160]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072c2:	4b27      	ldr	r3, [pc, #156]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	4a26      	ldr	r2, [pc, #152]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <RCCEx_PLL3_Config+0x160>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	69d2      	ldr	r2, [r2, #28]
 80072da:	00d2      	lsls	r2, r2, #3
 80072dc:	4920      	ldr	r1, [pc, #128]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072e2:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d106      	bne.n	8007302 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072f4:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a19      	ldr	r2, [pc, #100]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 80072fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007300:	e00f      	b.n	8007322 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d106      	bne.n	8007316 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007308:	4b15      	ldr	r3, [pc, #84]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	4a14      	ldr	r2, [pc, #80]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800730e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007314:	e005      	b.n	8007322 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007316:	4b12      	ldr	r3, [pc, #72]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	4a11      	ldr	r2, [pc, #68]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800731c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007320:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a0e      	ldr	r2, [pc, #56]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 8007328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732e:	f7fa fc63 	bl	8001bf8 <HAL_GetTick>
 8007332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007334:	e008      	b.n	8007348 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007336:	f7fa fc5f 	bl	8001bf8 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e006      	b.n	8007356 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <RCCEx_PLL3_Config+0x15c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0f0      	beq.n	8007336 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	ffff0007 	.word	0xffff0007

08007368 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e07c      	b.n	8007474 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10c      	bne.n	80073a0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fa f840 	bl	8001420 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2203      	movs	r2, #3
 80073a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f867 	bl	800747c <HAL_SD_InitCard>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e05d      	b.n	8007474 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80073b8:	f107 0308 	add.w	r3, r7, #8
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 faa6 	bl	8007910 <HAL_SD_GetCardStatus>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e052      	b.n	8007474 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80073ce:	7e3b      	ldrb	r3, [r7, #24]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80073d4:	7e7b      	ldrb	r3, [r7, #25]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10a      	bne.n	80073f8 <HAL_SD_Init+0x90>
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <HAL_SD_Init+0x86>
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80073f6:	e00b      	b.n	8007410 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d104      	bne.n	800740a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007406:	65da      	str	r2, [r3, #92]	; 0x5c
 8007408:	e002      	b.n	8007410 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb30 	bl	8007a7c <HAL_SD_ConfigWideBusOperation>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e026      	b.n	8007474 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007426:	f7fa fbe7 	bl	8001bf8 <HAL_GetTick>
 800742a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800742c:	e011      	b.n	8007452 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800742e:	f7fa fbe3 	bl	8001bf8 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d109      	bne.n	8007452 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e010      	b.n	8007474 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fbbc 	bl	8007bd0 <HAL_SD_GetCardState>
 8007458:	4603      	mov	r3, r0
 800745a:	2b04      	cmp	r3, #4
 800745c:	d1e7      	bne.n	800742e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3728      	adds	r7, #40	; 0x28
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800747c:	b5b0      	push	{r4, r5, r7, lr}
 800747e:	b08e      	sub	sp, #56	; 0x38
 8007480:	af04      	add	r7, sp, #16
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007484:	2300      	movs	r3, #0
 8007486:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007494:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007498:	f7fe ff90 	bl	80063bc <HAL_RCCEx_GetPeriphCLKFreq>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	4a40      	ldr	r2, [pc, #256]	; (80075a4 <HAL_SD_InitCard+0x128>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	091b      	lsrs	r3, r3, #4
 80074aa:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d107      	bne.n	80074c4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0210 	orr.w	r2, r2, #16
 80074c2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681d      	ldr	r5, [r3, #0]
 80074c8:	466c      	mov	r4, sp
 80074ca:	f107 0314 	add.w	r3, r7, #20
 80074ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074dc:	4628      	mov	r0, r5
 80074de:	f002 ffc9 	bl	800a474 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f002 fffb 	bl	800a4e2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d008      	beq.n	8007510 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <HAL_SD_InitCard+0x12c>)
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	3301      	adds	r3, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f7fa fb81 	bl	8001c10 <HAL_Delay>
 800750e:	e002      	b.n	8007516 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007510:	2002      	movs	r0, #2
 8007512:	f7fa fb7d 	bl	8001c10 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc38 	bl	8007d8c <SD_PowerON>
 800751c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e02e      	b.n	800759a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb67 	bl	8007c10 <SD_InitCard>
 8007542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00b      	beq.n	8007562 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e01b      	b.n	800759a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800756a:	4618      	mov	r0, r3
 800756c:	f003 f84e 	bl	800a60c <SDMMC_CmdBlockLength>
 8007570:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00f      	beq.n	8007598 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <HAL_SD_InitCard+0x130>)
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3728      	adds	r7, #40	; 0x28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bdb0      	pop	{r4, r5, r7, pc}
 80075a2:	bf00      	nop
 80075a4:	014f8b59 	.word	0x014f8b59
 80075a8:	00012110 	.word	0x00012110
 80075ac:	1fe00fff 	.word	0x1fe00fff

080075b0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d6:	0f9b      	lsrs	r3, r3, #30
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e2:	0e9b      	lsrs	r3, r3, #26
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f4:	0e1b      	lsrs	r3, r3, #24
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	b2da      	uxtb	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b2da      	uxtb	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007628:	0d1b      	lsrs	r3, r3, #20
 800762a:	b29a      	uxth	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007646:	0bdb      	lsrs	r3, r3, #15
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007658:	0b9b      	lsrs	r3, r3, #14
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766a:	0b5b      	lsrs	r3, r3, #13
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800767c:	0b1b      	lsrs	r3, r3, #12
 800767e:	b2db      	uxtb	r3, r3
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2200      	movs	r2, #0
 800768e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d163      	bne.n	8007760 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800769c:	009a      	lsls	r2, r3, #2
 800769e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076a2:	4013      	ands	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076a8:	0f92      	lsrs	r2, r2, #30
 80076aa:	431a      	orrs	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076b4:	0edb      	lsrs	r3, r3, #27
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c6:	0e1b      	lsrs	r3, r3, #24
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d8:	0d5b      	lsrs	r3, r3, #21
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ea:	0c9b      	lsrs	r3, r3, #18
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076fc:	0bdb      	lsrs	r3, r3, #15
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	b2da      	uxtb	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7e1b      	ldrb	r3, [r3, #24]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	3302      	adds	r3, #2
 8007720:	2201      	movs	r2, #1
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800772a:	fb02 f203 	mul.w	r2, r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	7a1b      	ldrb	r3, [r3, #8]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	2201      	movs	r2, #1
 800773e:	409a      	lsls	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800774c:	0a52      	lsrs	r2, r2, #9
 800774e:	fb02 f203 	mul.w	r2, r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775c:	659a      	str	r2, [r3, #88]	; 0x58
 800775e:	e031      	b.n	80077c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d11d      	bne.n	80077a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007776:	0c1b      	lsrs	r3, r3, #16
 8007778:	431a      	orrs	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	3301      	adds	r3, #1
 8007784:	029a      	lsls	r2, r3, #10
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007798:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	659a      	str	r2, [r3, #88]	; 0x58
 80077a2:	e00f      	b.n	80077c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a58      	ldr	r2, [pc, #352]	; (800790c <HAL_SD_GetCardCSD+0x344>)
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e09d      	b.n	8007900 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c8:	0b9b      	lsrs	r3, r3, #14
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077da:	09db      	lsrs	r3, r3, #7
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fc:	0fdb      	lsrs	r3, r3, #31
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007808:	0f5b      	lsrs	r3, r3, #29
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	b2da      	uxtb	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781a:	0e9b      	lsrs	r3, r3, #26
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	b2da      	uxtb	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782c:	0d9b      	lsrs	r3, r3, #22
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	b2da      	uxtb	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783e:	0d5b      	lsrs	r3, r3, #21
 8007840:	b2db      	uxtb	r3, r3
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	b2da      	uxtb	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	b2da      	uxtb	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786e:	0bdb      	lsrs	r3, r3, #15
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007882:	0b9b      	lsrs	r3, r3, #14
 8007884:	b2db      	uxtb	r3, r3
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007896:	0b5b      	lsrs	r3, r3, #13
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078aa:	0b1b      	lsrs	r3, r3, #12
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	0a9b      	lsrs	r3, r3, #10
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	1fe00fff 	.word	0x1fe00fff

08007910 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b094      	sub	sp, #80	; 0x50
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb38 	bl	8007f9c <SD_SendSDStatus>
 800792c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800792e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007930:	2b00      	cmp	r3, #0
 8007932:	d011      	beq.n	8007958 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a4f      	ldr	r2, [pc, #316]	; (8007a78 <HAL_SD_GetCardStatus+0x168>)
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007956:	e070      	b.n	8007a3a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007982:	b29a      	uxth	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	0e1b      	lsrs	r3, r3, #24
 8007988:	b29b      	uxth	r3, r3
 800798a:	4313      	orrs	r3, r2
 800798c:	b29a      	uxth	r2, r3
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	061a      	lsls	r2, r3, #24
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800799e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80079a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0e1b      	lsrs	r3, r3, #24
 80079ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	0a9b      	lsrs	r3, r3, #10
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	0a1b      	lsrs	r3, r3, #8
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	091b      	lsrs	r3, r3, #4
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	0e1b      	lsrs	r3, r3, #24
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 fde2 	bl	800a60c <SDMMC_CmdBlockLength>
 8007a48:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <HAL_SD_GetCardStatus+0x168>)
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3750      	adds	r7, #80	; 0x50
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	1fe00fff 	.word	0x1fe00fff

08007a7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a7c:	b5b0      	push	{r4, r5, r7, lr}
 8007a7e:	b08e      	sub	sp, #56	; 0x38
 8007a80:	af04      	add	r7, sp, #16
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d02e      	beq.n	8007afa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa2:	d106      	bne.n	8007ab2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
 8007ab0:	e029      	b.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab8:	d10a      	bne.n	8007ad0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fb66 	bl	800818c <SD_WideBus_Enable>
 8007ac0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ace:	e01a      	b.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fba3 	bl	8008222 <SD_WideBus_Disable>
 8007adc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aea:	e00c      	b.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
 8007af8:	e005      	b.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2e      	ldr	r2, [pc, #184]	; (8007bcc <HAL_SD_ConfigWideBusOperation+0x150>)
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b1c:	e034      	b.n	8007b88 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d903      	bls.n	8007b44 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e012      	b.n	8007b6a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4c:	d103      	bne.n	8007b56 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e009      	b.n	8007b6a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5e:	d102      	bne.n	8007b66 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8007b60:	2302      	movs	r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e001      	b.n	8007b6a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007b66:	2304      	movs	r3, #4
 8007b68:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681d      	ldr	r5, [r3, #0]
 8007b6e:	466c      	mov	r4, sp
 8007b70:	f107 0314 	add.w	r3, r7, #20
 8007b74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b7c:	f107 0308 	add.w	r3, r7, #8
 8007b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b82:	4628      	mov	r0, r5
 8007b84:	f002 fc76 	bl	800a474 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 fd3b 	bl	800a60c <SDMMC_CmdBlockLength>
 8007b96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <HAL_SD_ConfigWideBusOperation+0x150>)
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3728      	adds	r7, #40	; 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bdb0      	pop	{r4, r5, r7, pc}
 8007bcc:	1fe00fff 	.word	0x1fe00fff

08007bd0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 faaa 	bl	800813c <SD_SendStatus>
 8007be8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0a5b      	lsrs	r3, r3, #9
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c06:	693b      	ldr	r3, [r7, #16]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b091      	sub	sp, #68	; 0x44
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f002 fc6f 	bl	800a504 <SDMMC_GetPowerState>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c30:	e0a8      	b.n	8007d84 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d02e      	beq.n	8007c98 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f002 fdf1 	bl	800a826 <SDMMC_CmdSendCID>
 8007c44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <SD_InitCard+0x40>
    {
      return errorstate;
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4e:	e099      	b.n	8007d84 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f002 fc99 	bl	800a58e <SDMMC_GetResponse>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2104      	movs	r1, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fc90 	bl	800a58e <SDMMC_GetResponse>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2108      	movs	r1, #8
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f002 fc87 	bl	800a58e <SDMMC_GetResponse>
 8007c80:	4602      	mov	r2, r0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	210c      	movs	r1, #12
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f002 fc7e 	bl	800a58e <SDMMC_GetResponse>
 8007c92:	4602      	mov	r2, r0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d00d      	beq.n	8007cbc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f107 020e 	add.w	r2, r7, #14
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 fdfa 	bl	800a8a4 <SDMMC_CmdSetRelAdd>
 8007cb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <SD_InitCard+0xac>
    {
      return errorstate;
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cba:	e063      	b.n	8007d84 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d036      	beq.n	8007d32 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f002 fdc3 	bl	800a864 <SDMMC_CmdSendCSD>
 8007cde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <SD_InitCard+0xda>
    {
      return errorstate;
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	e04c      	b.n	8007d84 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f002 fc4c 	bl	800a58e <SDMMC_GetResponse>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2104      	movs	r1, #4
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 fc43 	bl	800a58e <SDMMC_GetResponse>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2108      	movs	r1, #8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f002 fc3a 	bl	800a58e <SDMMC_GetResponse>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	210c      	movs	r1, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f002 fc31 	bl	800a58e <SDMMC_GetResponse>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2104      	movs	r1, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 fc28 	bl	800a58e <SDMMC_GetResponse>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	0d1a      	lsrs	r2, r3, #20
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d46:	f107 0310 	add.w	r3, r7, #16
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fc3b 	bl	80075c8 <HAL_SD_GetCardCSD>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d5c:	e012      	b.n	8007d84 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	f04f 0400 	mov.w	r4, #0
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4623      	mov	r3, r4
 8007d70:	4608      	mov	r0, r1
 8007d72:	f002 fc6e 	bl	800a652 <SDMMC_CmdSelDesel>
 8007d76:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <SD_InitCard+0x172>
  {
    return errorstate;
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	e000      	b.n	8007d84 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3744      	adds	r7, #68	; 0x44
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd90      	pop	{r4, r7, pc}

08007d8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007da0:	f7f9 ff2a 	bl	8001bf8 <HAL_GetTick>
 8007da4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f002 fc75 	bl	800a69a <SDMMC_CmdGoIdleState>
 8007db0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <SD_PowerON+0x30>
  {
    return errorstate;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e0e9      	b.n	8007f90 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 fc88 	bl	800a6d6 <SDMMC_CmdOperCond>
 8007dc6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 fc5e 	bl	800a69a <SDMMC_CmdGoIdleState>
 8007dde:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <SD_PowerON+0x64>
    {
      return errorstate;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	e0d2      	b.n	8007f90 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d137      	bne.n	8007e68 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fc89 	bl	800a716 <SDMMC_CmdAppCommand>
 8007e04:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d02d      	beq.n	8007e68 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e10:	e0be      	b.n	8007f90 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 fc7c 	bl	800a716 <SDMMC_CmdAppCommand>
 8007e1e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <SD_PowerON+0x9e>
    {
      return errorstate;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	e0b2      	b.n	8007f90 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	495a      	ldr	r1, [pc, #360]	; (8007f98 <SD_PowerON+0x20c>)
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 fc93 	bl	800a75c <SDMMC_CmdAppOperCommand>
 8007e36:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e42:	e0a5      	b.n	8007f90 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f002 fb9f 	bl	800a58e <SDMMC_GetResponse>
 8007e50:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	0fdb      	lsrs	r3, r3, #31
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <SD_PowerON+0xd2>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <SD_PowerON+0xd4>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]

    count++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d802      	bhi.n	8007e78 <SD_PowerON+0xec>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0cc      	beq.n	8007e12 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d902      	bls.n	8007e88 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e86:	e083      	b.n	8007f90 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d07d      	beq.n	8007f8e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d176      	bne.n	8007f8e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d071      	beq.n	8007f8e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0208 	orr.w	r2, r2, #8
 8007ec0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 fd53 	bl	800a972 <SDMMC_CmdVoltageSwitch>
 8007ecc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <SD_PowerON+0x162>
        {
          return errorstate;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	e05b      	b.n	8007f90 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ed8:	f7f9 fe8e 	bl	8001bf8 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d102      	bne.n	8007eee <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007ee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eec:	e050      	b.n	8007f90 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007efc:	d1ec      	bne.n	8007ed8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f16:	d002      	beq.n	8007f1e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f1c:	e038      	b.n	8007f90 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8007f1e:	2001      	movs	r0, #1
 8007f20:	f7ff fb46 	bl	80075b0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0204 	orr.w	r2, r2, #4
 8007f32:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007f34:	e00a      	b.n	8007f4c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f36:	f7f9 fe5f 	bl	8001bf8 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d102      	bne.n	8007f4c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f4a:	e021      	b.n	8007f90 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f5a:	d1ec      	bne.n	8007f36 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f74:	d102      	bne.n	8007f7c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f7a:	e009      	b.n	8007f90 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2213      	movs	r2, #19
 8007f82:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	c1100000 	.word	0xc1100000

08007f9c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	; 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fa6:	f7f9 fe27 	bl	8001bf8 <HAL_GetTick>
 8007faa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f002 fae9 	bl	800a58e <SDMMC_GetResponse>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc6:	d102      	bne.n	8007fce <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fcc:	e0b0      	b.n	8008130 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2140      	movs	r1, #64	; 0x40
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fb19 	bl	800a60c <SDMMC_CmdBlockLength>
 8007fda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	e0a0      	b.n	8008130 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f002 fb8b 	bl	800a716 <SDMMC_CmdAppCommand>
 8008000:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	e08d      	b.n	8008130 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008014:	f04f 33ff 	mov.w	r3, #4294967295
 8008018:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800801e:	2360      	movs	r3, #96	; 0x60
 8008020:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008022:	2302      	movs	r3, #2
 8008024:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800802a:	2301      	movs	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f107 0208 	add.w	r2, r7, #8
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f002 fabb 	bl	800a5b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f002 fc73 	bl	800a92e <SDMMC_CmdStatusRegister>
 8008048:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d02b      	beq.n	80080a8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	e069      	b.n	8008130 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d013      	beq.n	8008092 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800806a:	2300      	movs	r3, #0
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806e:	e00d      	b.n	800808c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f002 fa27 	bl	800a4c8 <SDMMC_ReadFIFO>
 800807a:	4602      	mov	r2, r0
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	601a      	str	r2, [r3, #0]
        pData++;
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	3304      	adds	r3, #4
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	3301      	adds	r3, #1
 800808a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	2b07      	cmp	r3, #7
 8008090:	d9ee      	bls.n	8008070 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008092:	f7f9 fdb1 	bl	8001bf8 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d102      	bne.n	80080a8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080a6:	e043      	b.n	8008130 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0d2      	beq.n	800805c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80080c4:	2308      	movs	r3, #8
 80080c6:	e033      	b.n	8008130 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80080d6:	2302      	movs	r3, #2
 80080d8:	e02a      	b.n	8008130 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80080e8:	2320      	movs	r3, #32
 80080ea:	e021      	b.n	8008130 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f002 f9e9 	bl	800a4c8 <SDMMC_ReadFIFO>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	601a      	str	r2, [r3, #0]
    pData++;
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	3304      	adds	r3, #4
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008102:	f7f9 fd79 	bl	8001bf8 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d102      	bne.n	8008118 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008116:	e00b      	b.n	8008130 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e2      	bne.n	80080ec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a03      	ldr	r2, [pc, #12]	; (8008138 <SD_SendSDStatus+0x19c>)
 800812c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	; 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	18000f3a 	.word	0x18000f3a

0800813c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800814c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008150:	e018      	b.n	8008184 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815a:	041b      	lsls	r3, r3, #16
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f002 fbc2 	bl	800a8e8 <SDMMC_CmdSendStatus>
 8008164:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <SD_SendStatus+0x34>
  {
    return errorstate;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e009      	b.n	8008184 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f002 fa09 	bl	800a58e <SDMMC_GetResponse>
 800817c:	4602      	mov	r2, r0
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f9f3 	bl	800a58e <SDMMC_GetResponse>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081b2:	d102      	bne.n	80081ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081b8:	e02f      	b.n	800821a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f879 	bl	80082b8 <SD_FindSCR>
 80081c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	e023      	b.n	800821a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01c      	beq.n	8008216 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f002 fa94 	bl	800a716 <SDMMC_CmdAppCommand>
 80081ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	e00f      	b.n	800821a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2102      	movs	r1, #2
 8008200:	4618      	mov	r0, r3
 8008202:	f002 facb 	bl	800a79c <SDMMC_CmdBusWidth>
 8008206:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	e003      	b.n	800821a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
 8008214:	e001      	b.n	800821a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b086      	sub	sp, #24
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f002 f9a8 	bl	800a58e <SDMMC_GetResponse>
 800823e:	4603      	mov	r3, r0
 8008240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008248:	d102      	bne.n	8008250 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800824a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800824e:	e02f      	b.n	80082b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f82e 	bl	80082b8 <SD_FindSCR>
 800825c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	e023      	b.n	80082b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01c      	beq.n	80082ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f002 fa49 	bl	800a716 <SDMMC_CmdAppCommand>
 8008284:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	e00f      	b.n	80082b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f002 fa80 	bl	800a79c <SDMMC_CmdBusWidth>
 800829c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	e003      	b.n	80082b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e001      	b.n	80082b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08e      	sub	sp, #56	; 0x38
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082c2:	f7f9 fc99 	bl	8001bf8 <HAL_GetTick>
 80082c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80082cc:	2300      	movs	r3, #0
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2108      	movs	r1, #8
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 f994 	bl	800a60c <SDMMC_CmdBlockLength>
 80082e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	e0ad      	b.n	800844c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f8:	041b      	lsls	r3, r3, #16
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f002 fa0a 	bl	800a716 <SDMMC_CmdAppCommand>
 8008302:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <SD_FindSCR+0x56>
  {
    return errorstate;
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	e09e      	b.n	800844c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800830e:	f04f 33ff 	mov.w	r3, #4294967295
 8008312:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008314:	2308      	movs	r3, #8
 8008316:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008318:	2330      	movs	r3, #48	; 0x30
 800831a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800831c:	2302      	movs	r3, #2
 800831e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008320:	2300      	movs	r3, #0
 8008322:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008324:	2301      	movs	r3, #1
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f107 0210 	add.w	r2, r7, #16
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f002 f93e 	bl	800a5b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f002 fa50 	bl	800a7e2 <SDMMC_CmdSendSCR>
 8008342:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	2b00      	cmp	r3, #0
 8008348:	d027      	beq.n	800839a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	e07e      	b.n	800844c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d113      	bne.n	8008384 <SD_FindSCR+0xcc>
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	2b00      	cmp	r3, #0
 8008360:	d110      	bne.n	8008384 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f002 f8ae 	bl	800a4c8 <SDMMC_ReadFIFO>
 800836c:	4603      	mov	r3, r0
 800836e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f002 f8a7 	bl	800a4c8 <SDMMC_ReadFIFO>
 800837a:	4603      	mov	r3, r0
 800837c:	60fb      	str	r3, [r7, #12]
      index++;
 800837e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008380:	3301      	adds	r3, #1
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008384:	f7f9 fc38 	bl	8001bf8 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d102      	bne.n	800839a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008398:	e058      	b.n	800844c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a0:	f240 532a 	movw	r3, #1322	; 0x52a
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0d1      	beq.n	800834e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2208      	movs	r2, #8
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083c0:	2308      	movs	r3, #8
 80083c2:	e043      	b.n	800844c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2202      	movs	r2, #2
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083da:	2302      	movs	r3, #2
 80083dc:	e036      	b.n	800844c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2220      	movs	r2, #32
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80083f4:	2320      	movs	r3, #32
 80083f6:	e029      	b.n	800844c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <SD_FindSCR+0x19c>)
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	061a      	lsls	r2, r3, #24
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800840c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	0a1b      	lsrs	r3, r3, #8
 8008412:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008416:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	601a      	str	r2, [r3, #0]
    scr++;
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	3304      	adds	r3, #4
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	061a      	lsls	r2, r3, #24
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008434:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	0a1b      	lsrs	r3, r3, #8
 800843a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800843e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	0e1b      	lsrs	r3, r3, #24
 8008444:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3738      	adds	r7, #56	; 0x38
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	18000f3a 	.word	0x18000f3a

08008458 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e02b      	b.n	80084c4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7f9 fa45 	bl	8001910 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3304      	adds	r3, #4
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f001 ff25 	bl	800a2e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	f001 ff79 	bl	800a3a0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <HAL_SDRAM_Init+0x74>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a06      	ldr	r2, [pc, #24]	; (80084cc <HAL_SDRAM_Init+0x74>)
 80084b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084b8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	52004000 	.word	0x52004000

080084d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e0e2      	b.n	80086ac <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a70      	ldr	r2, [pc, #448]	; (80086b4 <HAL_SPI_Init+0x1e4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <HAL_SPI_Init+0x46>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a6f      	ldr	r2, [pc, #444]	; (80086b8 <HAL_SPI_Init+0x1e8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00a      	beq.n	8008516 <HAL_SPI_Init+0x46>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a6d      	ldr	r2, [pc, #436]	; (80086bc <HAL_SPI_Init+0x1ec>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d005      	beq.n	8008516 <HAL_SPI_Init+0x46>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b0f      	cmp	r3, #15
 8008510:	d901      	bls.n	8008516 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e0ca      	b.n	80086ac <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8d2 	bl	80086c0 <SPI_GetPacketSize>
 800851c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a64      	ldr	r2, [pc, #400]	; (80086b4 <HAL_SPI_Init+0x1e4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00c      	beq.n	8008542 <HAL_SPI_Init+0x72>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a62      	ldr	r2, [pc, #392]	; (80086b8 <HAL_SPI_Init+0x1e8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <HAL_SPI_Init+0x72>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a61      	ldr	r2, [pc, #388]	; (80086bc <HAL_SPI_Init+0x1ec>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d002      	beq.n	8008542 <HAL_SPI_Init+0x72>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b08      	cmp	r3, #8
 8008540:	d811      	bhi.n	8008566 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008546:	4a5b      	ldr	r2, [pc, #364]	; (80086b4 <HAL_SPI_Init+0x1e4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a59      	ldr	r2, [pc, #356]	; (80086b8 <HAL_SPI_Init+0x1e8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <HAL_SPI_Init+0x90>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a58      	ldr	r2, [pc, #352]	; (80086bc <HAL_SPI_Init+0x1ec>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d104      	bne.n	800856a <HAL_SPI_Init+0x9a>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b10      	cmp	r3, #16
 8008564:	d901      	bls.n	800856a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0a0      	b.n	80086ac <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f8 ffba 	bl	80014f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085a4:	d110      	bne.n	80085c8 <HAL_SPI_Init+0xf8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ae:	d10b      	bne.n	80085c8 <HAL_SPI_Init+0xf8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085c6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	ea42 0103 	orr.w	r1, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008628:	ea42 0103 	orr.w	r1, r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d113      	bne.n	8008668 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008652:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008666:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0201 	bic.w	r2, r2, #1
 8008676:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40013000 	.word	0x40013000
 80086b8:	40003800 	.word	0x40003800
 80086bc:	40003c00 	.word	0x40003c00

080086c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3307      	adds	r3, #7
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e049      	b.n	800879c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7f8 ff77 	bl	8001610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3304      	adds	r3, #4
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f000 f945 	bl	80089c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e0fd      	b.n	80089ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b14      	cmp	r3, #20
 80087ca:	f200 80f0 	bhi.w	80089ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	08008829 	.word	0x08008829
 80087d8:	080089af 	.word	0x080089af
 80087dc:	080089af 	.word	0x080089af
 80087e0:	080089af 	.word	0x080089af
 80087e4:	08008869 	.word	0x08008869
 80087e8:	080089af 	.word	0x080089af
 80087ec:	080089af 	.word	0x080089af
 80087f0:	080089af 	.word	0x080089af
 80087f4:	080088ab 	.word	0x080088ab
 80087f8:	080089af 	.word	0x080089af
 80087fc:	080089af 	.word	0x080089af
 8008800:	080089af 	.word	0x080089af
 8008804:	080088eb 	.word	0x080088eb
 8008808:	080089af 	.word	0x080089af
 800880c:	080089af 	.word	0x080089af
 8008810:	080089af 	.word	0x080089af
 8008814:	0800892d 	.word	0x0800892d
 8008818:	080089af 	.word	0x080089af
 800881c:	080089af 	.word	0x080089af
 8008820:	080089af 	.word	0x080089af
 8008824:	0800896d 	.word	0x0800896d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f962 	bl	8008af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0208 	orr.w	r2, r2, #8
 8008842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0204 	bic.w	r2, r2, #4
 8008852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6999      	ldr	r1, [r3, #24]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	691a      	ldr	r2, [r3, #16]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	619a      	str	r2, [r3, #24]
      break;
 8008866:	e0a3      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f9d2 	bl	8008c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	021a      	lsls	r2, r3, #8
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	619a      	str	r2, [r3, #24]
      break;
 80088a8:	e082      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fa3b 	bl	8008d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0208 	orr.w	r2, r2, #8
 80088c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0204 	bic.w	r2, r2, #4
 80088d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69d9      	ldr	r1, [r3, #28]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	61da      	str	r2, [r3, #28]
      break;
 80088e8:	e062      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 faa1 	bl	8008e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69d9      	ldr	r1, [r3, #28]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	021a      	lsls	r2, r3, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	61da      	str	r2, [r3, #28]
      break;
 800892a:	e041      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fae8 	bl	8008f08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0208 	orr.w	r2, r2, #8
 8008946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0204 	bic.w	r2, r2, #4
 8008956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800896a:	e021      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fb2a 	bl	8008fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	021a      	lsls	r2, r3, #8
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089ac:	e000      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80089ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop

080089c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a40      	ldr	r2, [pc, #256]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d013      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e2:	d00f      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a3d      	ldr	r2, [pc, #244]	; (8008adc <TIM_Base_SetConfig+0x118>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00b      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <TIM_Base_SetConfig+0x11c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d007      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a3b      	ldr	r2, [pc, #236]	; (8008ae4 <TIM_Base_SetConfig+0x120>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a3a      	ldr	r2, [pc, #232]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d108      	bne.n	8008a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01f      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a24:	d01b      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	; (8008adc <TIM_Base_SetConfig+0x118>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d017      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2b      	ldr	r2, [pc, #172]	; (8008ae0 <TIM_Base_SetConfig+0x11c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a2a      	ldr	r2, [pc, #168]	; (8008ae4 <TIM_Base_SetConfig+0x120>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00f      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a29      	ldr	r2, [pc, #164]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00b      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a28      	ldr	r2, [pc, #160]	; (8008aec <TIM_Base_SetConfig+0x128>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d007      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a27      	ldr	r2, [pc, #156]	; (8008af0 <TIM_Base_SetConfig+0x12c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <TIM_Base_SetConfig+0x130>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d108      	bne.n	8008a70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00f      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a12      	ldr	r2, [pc, #72]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a11      	ldr	r2, [pc, #68]	; (8008aec <TIM_Base_SetConfig+0x128>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d007      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <TIM_Base_SetConfig+0x12c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <TIM_Base_SetConfig+0x130>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d103      	bne.n	8008ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	615a      	str	r2, [r3, #20]
}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40010400 	.word	0x40010400
 8008aec:	40014000 	.word	0x40014000
 8008af0:	40014400 	.word	0x40014400
 8008af4:	40014800 	.word	0x40014800

08008af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f023 0201 	bic.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4b37      	ldr	r3, [pc, #220]	; (8008c00 <TIM_OC1_SetConfig+0x108>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 0302 	bic.w	r3, r3, #2
 8008b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a2d      	ldr	r2, [pc, #180]	; (8008c04 <TIM_OC1_SetConfig+0x10c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00f      	beq.n	8008b74 <TIM_OC1_SetConfig+0x7c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a2c      	ldr	r2, [pc, #176]	; (8008c08 <TIM_OC1_SetConfig+0x110>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00b      	beq.n	8008b74 <TIM_OC1_SetConfig+0x7c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a2b      	ldr	r2, [pc, #172]	; (8008c0c <TIM_OC1_SetConfig+0x114>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d007      	beq.n	8008b74 <TIM_OC1_SetConfig+0x7c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a2a      	ldr	r2, [pc, #168]	; (8008c10 <TIM_OC1_SetConfig+0x118>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_OC1_SetConfig+0x7c>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <TIM_OC1_SetConfig+0x11c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d10c      	bne.n	8008b8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f023 0308 	bic.w	r3, r3, #8
 8008b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f023 0304 	bic.w	r3, r3, #4
 8008b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <TIM_OC1_SetConfig+0x10c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00f      	beq.n	8008bb6 <TIM_OC1_SetConfig+0xbe>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a1b      	ldr	r2, [pc, #108]	; (8008c08 <TIM_OC1_SetConfig+0x110>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00b      	beq.n	8008bb6 <TIM_OC1_SetConfig+0xbe>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a1a      	ldr	r2, [pc, #104]	; (8008c0c <TIM_OC1_SetConfig+0x114>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d007      	beq.n	8008bb6 <TIM_OC1_SetConfig+0xbe>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a19      	ldr	r2, [pc, #100]	; (8008c10 <TIM_OC1_SetConfig+0x118>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d003      	beq.n	8008bb6 <TIM_OC1_SetConfig+0xbe>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a18      	ldr	r2, [pc, #96]	; (8008c14 <TIM_OC1_SetConfig+0x11c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d111      	bne.n	8008bda <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	621a      	str	r2, [r3, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	fffeff8f 	.word	0xfffeff8f
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40010400 	.word	0x40010400
 8008c0c:	40014000 	.word	0x40014000
 8008c10:	40014400 	.word	0x40014400
 8008c14:	40014800 	.word	0x40014800

08008c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f023 0210 	bic.w	r2, r3, #16
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4b34      	ldr	r3, [pc, #208]	; (8008d14 <TIM_OC2_SetConfig+0xfc>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f023 0320 	bic.w	r3, r3, #32
 8008c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a29      	ldr	r2, [pc, #164]	; (8008d18 <TIM_OC2_SetConfig+0x100>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_OC2_SetConfig+0x68>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a28      	ldr	r2, [pc, #160]	; (8008d1c <TIM_OC2_SetConfig+0x104>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10d      	bne.n	8008c9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <TIM_OC2_SetConfig+0x100>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00f      	beq.n	8008cc4 <TIM_OC2_SetConfig+0xac>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <TIM_OC2_SetConfig+0x104>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00b      	beq.n	8008cc4 <TIM_OC2_SetConfig+0xac>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1c      	ldr	r2, [pc, #112]	; (8008d20 <TIM_OC2_SetConfig+0x108>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d007      	beq.n	8008cc4 <TIM_OC2_SetConfig+0xac>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a1b      	ldr	r2, [pc, #108]	; (8008d24 <TIM_OC2_SetConfig+0x10c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d003      	beq.n	8008cc4 <TIM_OC2_SetConfig+0xac>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a1a      	ldr	r2, [pc, #104]	; (8008d28 <TIM_OC2_SetConfig+0x110>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d113      	bne.n	8008cec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	feff8fff 	.word	0xfeff8fff
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800

08008d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <TIM_OC3_SetConfig+0xf8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d003      	beq.n	8008d92 <TIM_OC3_SetConfig+0x66>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a26      	ldr	r2, [pc, #152]	; (8008e28 <TIM_OC3_SetConfig+0xfc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d10d      	bne.n	8008dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a1c      	ldr	r2, [pc, #112]	; (8008e24 <TIM_OC3_SetConfig+0xf8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00f      	beq.n	8008dd6 <TIM_OC3_SetConfig+0xaa>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1b      	ldr	r2, [pc, #108]	; (8008e28 <TIM_OC3_SetConfig+0xfc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00b      	beq.n	8008dd6 <TIM_OC3_SetConfig+0xaa>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1a      	ldr	r2, [pc, #104]	; (8008e2c <TIM_OC3_SetConfig+0x100>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d007      	beq.n	8008dd6 <TIM_OC3_SetConfig+0xaa>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a19      	ldr	r2, [pc, #100]	; (8008e30 <TIM_OC3_SetConfig+0x104>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_OC3_SetConfig+0xaa>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <TIM_OC3_SetConfig+0x108>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d113      	bne.n	8008dfe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40010400 	.word	0x40010400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40014400 	.word	0x40014400
 8008e34:	40014800 	.word	0x40014800

08008e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <TIM_OC4_SetConfig+0xbc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00f      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x80>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <TIM_OC4_SetConfig+0xc0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d00b      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x80>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a16      	ldr	r2, [pc, #88]	; (8008efc <TIM_OC4_SetConfig+0xc4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d007      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x80>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <TIM_OC4_SetConfig+0xc8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x80>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <TIM_OC4_SetConfig+0xcc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d109      	bne.n	8008ecc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	019b      	lsls	r3, r3, #6
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40010000 	.word	0x40010000
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40014400 	.word	0x40014400
 8008f04:	40014800 	.word	0x40014800

08008f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <TIM_OC5_SetConfig+0xb0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00f      	beq.n	8008f7e <TIM_OC5_SetConfig+0x76>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a16      	ldr	r2, [pc, #88]	; (8008fbc <TIM_OC5_SetConfig+0xb4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00b      	beq.n	8008f7e <TIM_OC5_SetConfig+0x76>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <TIM_OC5_SetConfig+0xb8>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <TIM_OC5_SetConfig+0x76>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <TIM_OC5_SetConfig+0xbc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_OC5_SetConfig+0x76>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <TIM_OC5_SetConfig+0xc0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d109      	bne.n	8008f92 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	40014400 	.word	0x40014400
 8008fc8:	40014800 	.word	0x40014800

08008fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800900e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	051b      	lsls	r3, r3, #20
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a18      	ldr	r2, [pc, #96]	; (8009080 <TIM_OC6_SetConfig+0xb4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00f      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a17      	ldr	r2, [pc, #92]	; (8009084 <TIM_OC6_SetConfig+0xb8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00b      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a16      	ldr	r2, [pc, #88]	; (8009088 <TIM_OC6_SetConfig+0xbc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d007      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a15      	ldr	r2, [pc, #84]	; (800908c <TIM_OC6_SetConfig+0xc0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d003      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a14      	ldr	r2, [pc, #80]	; (8009090 <TIM_OC6_SetConfig+0xc4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d109      	bne.n	8009058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800904a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	029b      	lsls	r3, r3, #10
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	621a      	str	r2, [r3, #32]
}
 8009072:	bf00      	nop
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40010000 	.word	0x40010000
 8009084:	40010400 	.word	0x40010400
 8009088:	40014000 	.word	0x40014000
 800908c:	40014400 	.word	0x40014400
 8009090:	40014800 	.word	0x40014800

08009094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e068      	b.n	800917e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a2e      	ldr	r2, [pc, #184]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d004      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a2d      	ldr	r2, [pc, #180]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d108      	bne.n	80090f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a1e      	ldr	r2, [pc, #120]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d01d      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d018      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d013      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1a      	ldr	r2, [pc, #104]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00e      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a18      	ldr	r2, [pc, #96]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d009      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a13      	ldr	r2, [pc, #76]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d004      	beq.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d10c      	bne.n	800916c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4313      	orrs	r3, r2
 8009162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40010000 	.word	0x40010000
 8009190:	40010400 	.word	0x40010400
 8009194:	40000400 	.word	0x40000400
 8009198:	40000800 	.word	0x40000800
 800919c:	40000c00 	.word	0x40000c00
 80091a0:	40001800 	.word	0x40001800

080091a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80091a8:	b08e      	sub	sp, #56	; 0x38
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d2:	4313      	orrs	r3, r2
 80091d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4bc1      	ldr	r3, [pc, #772]	; (80094e4 <UART_SetConfig+0x340>)
 80091de:	4013      	ands	r3, r2
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6812      	ldr	r2, [r2, #0]
 80091e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091e6:	430b      	orrs	r3, r1
 80091e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4ab7      	ldr	r2, [pc, #732]	; (80094e8 <UART_SetConfig+0x344>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d004      	beq.n	800921a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009216:	4313      	orrs	r3, r2
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	4bb2      	ldr	r3, [pc, #712]	; (80094ec <UART_SetConfig+0x348>)
 8009222:	4013      	ands	r3, r2
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800922a:	430b      	orrs	r3, r1
 800922c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	f023 010f 	bic.w	r1, r3, #15
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4aa9      	ldr	r2, [pc, #676]	; (80094f0 <UART_SetConfig+0x34c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d177      	bne.n	800933e <UART_SetConfig+0x19a>
 800924e:	4ba9      	ldr	r3, [pc, #676]	; (80094f4 <UART_SetConfig+0x350>)
 8009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009256:	2b28      	cmp	r3, #40	; 0x28
 8009258:	d86c      	bhi.n	8009334 <UART_SetConfig+0x190>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <UART_SetConfig+0xbc>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009305 	.word	0x08009305
 8009264:	08009335 	.word	0x08009335
 8009268:	08009335 	.word	0x08009335
 800926c:	08009335 	.word	0x08009335
 8009270:	08009335 	.word	0x08009335
 8009274:	08009335 	.word	0x08009335
 8009278:	08009335 	.word	0x08009335
 800927c:	08009335 	.word	0x08009335
 8009280:	0800930d 	.word	0x0800930d
 8009284:	08009335 	.word	0x08009335
 8009288:	08009335 	.word	0x08009335
 800928c:	08009335 	.word	0x08009335
 8009290:	08009335 	.word	0x08009335
 8009294:	08009335 	.word	0x08009335
 8009298:	08009335 	.word	0x08009335
 800929c:	08009335 	.word	0x08009335
 80092a0:	08009315 	.word	0x08009315
 80092a4:	08009335 	.word	0x08009335
 80092a8:	08009335 	.word	0x08009335
 80092ac:	08009335 	.word	0x08009335
 80092b0:	08009335 	.word	0x08009335
 80092b4:	08009335 	.word	0x08009335
 80092b8:	08009335 	.word	0x08009335
 80092bc:	08009335 	.word	0x08009335
 80092c0:	0800931d 	.word	0x0800931d
 80092c4:	08009335 	.word	0x08009335
 80092c8:	08009335 	.word	0x08009335
 80092cc:	08009335 	.word	0x08009335
 80092d0:	08009335 	.word	0x08009335
 80092d4:	08009335 	.word	0x08009335
 80092d8:	08009335 	.word	0x08009335
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009325 	.word	0x08009325
 80092e4:	08009335 	.word	0x08009335
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009335 	.word	0x08009335
 80092f4:	08009335 	.word	0x08009335
 80092f8:	08009335 	.word	0x08009335
 80092fc:	08009335 	.word	0x08009335
 8009300:	0800932d 	.word	0x0800932d
 8009304:	2301      	movs	r3, #1
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e233      	b.n	8009774 <UART_SetConfig+0x5d0>
 800930c:	2304      	movs	r3, #4
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e22f      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009314:	2308      	movs	r3, #8
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e22b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800931c:	2310      	movs	r3, #16
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e227      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009324:	2320      	movs	r3, #32
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e223      	b.n	8009774 <UART_SetConfig+0x5d0>
 800932c:	2340      	movs	r3, #64	; 0x40
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009332:	e21f      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009334:	2380      	movs	r3, #128	; 0x80
 8009336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800933a:	bf00      	nop
 800933c:	e21a      	b.n	8009774 <UART_SetConfig+0x5d0>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a6d      	ldr	r2, [pc, #436]	; (80094f8 <UART_SetConfig+0x354>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d132      	bne.n	80093ae <UART_SetConfig+0x20a>
 8009348:	4b6a      	ldr	r3, [pc, #424]	; (80094f4 <UART_SetConfig+0x350>)
 800934a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	2b05      	cmp	r3, #5
 8009352:	d827      	bhi.n	80093a4 <UART_SetConfig+0x200>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <UART_SetConfig+0x1b8>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009375 	.word	0x08009375
 8009360:	0800937d 	.word	0x0800937d
 8009364:	08009385 	.word	0x08009385
 8009368:	0800938d 	.word	0x0800938d
 800936c:	08009395 	.word	0x08009395
 8009370:	0800939d 	.word	0x0800939d
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e1fb      	b.n	8009774 <UART_SetConfig+0x5d0>
 800937c:	2304      	movs	r3, #4
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e1f7      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009384:	2308      	movs	r3, #8
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e1f3      	b.n	8009774 <UART_SetConfig+0x5d0>
 800938c:	2310      	movs	r3, #16
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e1ef      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009394:	2320      	movs	r3, #32
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e1eb      	b.n	8009774 <UART_SetConfig+0x5d0>
 800939c:	2340      	movs	r3, #64	; 0x40
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	e1e7      	b.n	8009774 <UART_SetConfig+0x5d0>
 80093a4:	2380      	movs	r3, #128	; 0x80
 80093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093aa:	bf00      	nop
 80093ac:	e1e2      	b.n	8009774 <UART_SetConfig+0x5d0>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a52      	ldr	r2, [pc, #328]	; (80094fc <UART_SetConfig+0x358>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d132      	bne.n	800941e <UART_SetConfig+0x27a>
 80093b8:	4b4e      	ldr	r3, [pc, #312]	; (80094f4 <UART_SetConfig+0x350>)
 80093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	2b05      	cmp	r3, #5
 80093c2:	d827      	bhi.n	8009414 <UART_SetConfig+0x270>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <UART_SetConfig+0x228>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	080093e5 	.word	0x080093e5
 80093d0:	080093ed 	.word	0x080093ed
 80093d4:	080093f5 	.word	0x080093f5
 80093d8:	080093fd 	.word	0x080093fd
 80093dc:	08009405 	.word	0x08009405
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	2300      	movs	r3, #0
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e1c3      	b.n	8009774 <UART_SetConfig+0x5d0>
 80093ec:	2304      	movs	r3, #4
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e1bf      	b.n	8009774 <UART_SetConfig+0x5d0>
 80093f4:	2308      	movs	r3, #8
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e1bb      	b.n	8009774 <UART_SetConfig+0x5d0>
 80093fc:	2310      	movs	r3, #16
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e1b7      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009404:	2320      	movs	r3, #32
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e1b3      	b.n	8009774 <UART_SetConfig+0x5d0>
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	e1af      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009414:	2380      	movs	r3, #128	; 0x80
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941a:	bf00      	nop
 800941c:	e1aa      	b.n	8009774 <UART_SetConfig+0x5d0>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a37      	ldr	r2, [pc, #220]	; (8009500 <UART_SetConfig+0x35c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d132      	bne.n	800948e <UART_SetConfig+0x2ea>
 8009428:	4b32      	ldr	r3, [pc, #200]	; (80094f4 <UART_SetConfig+0x350>)
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	2b05      	cmp	r3, #5
 8009432:	d827      	bhi.n	8009484 <UART_SetConfig+0x2e0>
 8009434:	a201      	add	r2, pc, #4	; (adr r2, 800943c <UART_SetConfig+0x298>)
 8009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943a:	bf00      	nop
 800943c:	08009455 	.word	0x08009455
 8009440:	0800945d 	.word	0x0800945d
 8009444:	08009465 	.word	0x08009465
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009475 	.word	0x08009475
 8009450:	0800947d 	.word	0x0800947d
 8009454:	2300      	movs	r3, #0
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e18b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800945c:	2304      	movs	r3, #4
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e187      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e183      	b.n	8009774 <UART_SetConfig+0x5d0>
 800946c:	2310      	movs	r3, #16
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e17f      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009474:	2320      	movs	r3, #32
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e17b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e177      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009484:	2380      	movs	r3, #128	; 0x80
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	bf00      	nop
 800948c:	e172      	b.n	8009774 <UART_SetConfig+0x5d0>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <UART_SetConfig+0x360>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d144      	bne.n	8009522 <UART_SetConfig+0x37e>
 8009498:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <UART_SetConfig+0x350>)
 800949a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949c:	f003 0307 	and.w	r3, r3, #7
 80094a0:	2b05      	cmp	r3, #5
 80094a2:	d839      	bhi.n	8009518 <UART_SetConfig+0x374>
 80094a4:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <UART_SetConfig+0x308>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094c5 	.word	0x080094c5
 80094b0:	080094cd 	.word	0x080094cd
 80094b4:	080094d5 	.word	0x080094d5
 80094b8:	080094dd 	.word	0x080094dd
 80094bc:	08009509 	.word	0x08009509
 80094c0:	08009511 	.word	0x08009511
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e153      	b.n	8009774 <UART_SetConfig+0x5d0>
 80094cc:	2304      	movs	r3, #4
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	e14f      	b.n	8009774 <UART_SetConfig+0x5d0>
 80094d4:	2308      	movs	r3, #8
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e14b      	b.n	8009774 <UART_SetConfig+0x5d0>
 80094dc:	2310      	movs	r3, #16
 80094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e2:	e147      	b.n	8009774 <UART_SetConfig+0x5d0>
 80094e4:	cfff69f3 	.word	0xcfff69f3
 80094e8:	58000c00 	.word	0x58000c00
 80094ec:	11fff4ff 	.word	0x11fff4ff
 80094f0:	40011000 	.word	0x40011000
 80094f4:	58024400 	.word	0x58024400
 80094f8:	40004400 	.word	0x40004400
 80094fc:	40004800 	.word	0x40004800
 8009500:	40004c00 	.word	0x40004c00
 8009504:	40005000 	.word	0x40005000
 8009508:	2320      	movs	r3, #32
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950e:	e131      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	e12d      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951e:	bf00      	nop
 8009520:	e128      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4ab6      	ldr	r2, [pc, #728]	; (8009800 <UART_SetConfig+0x65c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d178      	bne.n	800961e <UART_SetConfig+0x47a>
 800952c:	4bb5      	ldr	r3, [pc, #724]	; (8009804 <UART_SetConfig+0x660>)
 800952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009534:	2b28      	cmp	r3, #40	; 0x28
 8009536:	d86d      	bhi.n	8009614 <UART_SetConfig+0x470>
 8009538:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0x39c>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	080095e5 	.word	0x080095e5
 8009544:	08009615 	.word	0x08009615
 8009548:	08009615 	.word	0x08009615
 800954c:	08009615 	.word	0x08009615
 8009550:	08009615 	.word	0x08009615
 8009554:	08009615 	.word	0x08009615
 8009558:	08009615 	.word	0x08009615
 800955c:	08009615 	.word	0x08009615
 8009560:	080095ed 	.word	0x080095ed
 8009564:	08009615 	.word	0x08009615
 8009568:	08009615 	.word	0x08009615
 800956c:	08009615 	.word	0x08009615
 8009570:	08009615 	.word	0x08009615
 8009574:	08009615 	.word	0x08009615
 8009578:	08009615 	.word	0x08009615
 800957c:	08009615 	.word	0x08009615
 8009580:	080095f5 	.word	0x080095f5
 8009584:	08009615 	.word	0x08009615
 8009588:	08009615 	.word	0x08009615
 800958c:	08009615 	.word	0x08009615
 8009590:	08009615 	.word	0x08009615
 8009594:	08009615 	.word	0x08009615
 8009598:	08009615 	.word	0x08009615
 800959c:	08009615 	.word	0x08009615
 80095a0:	080095fd 	.word	0x080095fd
 80095a4:	08009615 	.word	0x08009615
 80095a8:	08009615 	.word	0x08009615
 80095ac:	08009615 	.word	0x08009615
 80095b0:	08009615 	.word	0x08009615
 80095b4:	08009615 	.word	0x08009615
 80095b8:	08009615 	.word	0x08009615
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009605 	.word	0x08009605
 80095c4:	08009615 	.word	0x08009615
 80095c8:	08009615 	.word	0x08009615
 80095cc:	08009615 	.word	0x08009615
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009615 	.word	0x08009615
 80095d8:	08009615 	.word	0x08009615
 80095dc:	08009615 	.word	0x08009615
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e0c3      	b.n	8009774 <UART_SetConfig+0x5d0>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e0bf      	b.n	8009774 <UART_SetConfig+0x5d0>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e0bb      	b.n	8009774 <UART_SetConfig+0x5d0>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e0b7      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e0b3      	b.n	8009774 <UART_SetConfig+0x5d0>
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e0af      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	bf00      	nop
 800961c:	e0aa      	b.n	8009774 <UART_SetConfig+0x5d0>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a79      	ldr	r2, [pc, #484]	; (8009808 <UART_SetConfig+0x664>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d132      	bne.n	800968e <UART_SetConfig+0x4ea>
 8009628:	4b76      	ldr	r3, [pc, #472]	; (8009804 <UART_SetConfig+0x660>)
 800962a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962c:	f003 0307 	and.w	r3, r3, #7
 8009630:	2b05      	cmp	r3, #5
 8009632:	d827      	bhi.n	8009684 <UART_SetConfig+0x4e0>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <UART_SetConfig+0x498>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009655 	.word	0x08009655
 8009640:	0800965d 	.word	0x0800965d
 8009644:	08009665 	.word	0x08009665
 8009648:	0800966d 	.word	0x0800966d
 800964c:	08009675 	.word	0x08009675
 8009650:	0800967d 	.word	0x0800967d
 8009654:	2300      	movs	r3, #0
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e08b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800965c:	2304      	movs	r3, #4
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009662:	e087      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009664:	2308      	movs	r3, #8
 8009666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966a:	e083      	b.n	8009774 <UART_SetConfig+0x5d0>
 800966c:	2310      	movs	r3, #16
 800966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009672:	e07f      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009674:	2320      	movs	r3, #32
 8009676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967a:	e07b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009682:	e077      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968a:	bf00      	nop
 800968c:	e072      	b.n	8009774 <UART_SetConfig+0x5d0>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a5e      	ldr	r2, [pc, #376]	; (800980c <UART_SetConfig+0x668>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d132      	bne.n	80096fe <UART_SetConfig+0x55a>
 8009698:	4b5a      	ldr	r3, [pc, #360]	; (8009804 <UART_SetConfig+0x660>)
 800969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	d827      	bhi.n	80096f4 <UART_SetConfig+0x550>
 80096a4:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x508>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e053      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e04f      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e04b      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e047      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e043      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e03f      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096f4:	2380      	movs	r3, #128	; 0x80
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	bf00      	nop
 80096fc:	e03a      	b.n	8009774 <UART_SetConfig+0x5d0>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a43      	ldr	r2, [pc, #268]	; (8009810 <UART_SetConfig+0x66c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d132      	bne.n	800976e <UART_SetConfig+0x5ca>
 8009708:	4b3e      	ldr	r3, [pc, #248]	; (8009804 <UART_SetConfig+0x660>)
 800970a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	2b05      	cmp	r3, #5
 8009712:	d827      	bhi.n	8009764 <UART_SetConfig+0x5c0>
 8009714:	a201      	add	r2, pc, #4	; (adr r2, 800971c <UART_SetConfig+0x578>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009735 	.word	0x08009735
 8009720:	0800973d 	.word	0x0800973d
 8009724:	08009745 	.word	0x08009745
 8009728:	0800974d 	.word	0x0800974d
 800972c:	08009755 	.word	0x08009755
 8009730:	0800975d 	.word	0x0800975d
 8009734:	2302      	movs	r3, #2
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e01b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800973c:	2304      	movs	r3, #4
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e017      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009744:	2308      	movs	r3, #8
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e013      	b.n	8009774 <UART_SetConfig+0x5d0>
 800974c:	2310      	movs	r3, #16
 800974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009752:	e00f      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009754:	2320      	movs	r3, #32
 8009756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975a:	e00b      	b.n	8009774 <UART_SetConfig+0x5d0>
 800975c:	2340      	movs	r3, #64	; 0x40
 800975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009762:	e007      	b.n	8009774 <UART_SetConfig+0x5d0>
 8009764:	2380      	movs	r3, #128	; 0x80
 8009766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976a:	bf00      	nop
 800976c:	e002      	b.n	8009774 <UART_SetConfig+0x5d0>
 800976e:	2380      	movs	r3, #128	; 0x80
 8009770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a25      	ldr	r2, [pc, #148]	; (8009810 <UART_SetConfig+0x66c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	f040 80b8 	bne.w	80098f0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009784:	2b08      	cmp	r3, #8
 8009786:	d019      	beq.n	80097bc <UART_SetConfig+0x618>
 8009788:	2b08      	cmp	r3, #8
 800978a:	dc04      	bgt.n	8009796 <UART_SetConfig+0x5f2>
 800978c:	2b02      	cmp	r3, #2
 800978e:	d009      	beq.n	80097a4 <UART_SetConfig+0x600>
 8009790:	2b04      	cmp	r3, #4
 8009792:	d00b      	beq.n	80097ac <UART_SetConfig+0x608>
 8009794:	e042      	b.n	800981c <UART_SetConfig+0x678>
 8009796:	2b20      	cmp	r3, #32
 8009798:	d02b      	beq.n	80097f2 <UART_SetConfig+0x64e>
 800979a:	2b40      	cmp	r3, #64	; 0x40
 800979c:	d02c      	beq.n	80097f8 <UART_SetConfig+0x654>
 800979e:	2b10      	cmp	r3, #16
 80097a0:	d014      	beq.n	80097cc <UART_SetConfig+0x628>
 80097a2:	e03b      	b.n	800981c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80097a4:	f7fd f882 	bl	80068ac <HAL_RCCEx_GetD3PCLK1Freq>
 80097a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097aa:	e03d      	b.n	8009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ac:	f107 0314 	add.w	r3, r7, #20
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd f891 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ba:	e035      	b.n	8009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097bc:	f107 0308 	add.w	r3, r7, #8
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd f9d5 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ca:	e02d      	b.n	8009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097cc:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <UART_SetConfig+0x660>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <UART_SetConfig+0x660>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <UART_SetConfig+0x670>)
 80097e4:	fa22 f303 	lsr.w	r3, r2, r3
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097ea:	e01d      	b.n	8009828 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80097ec:	4b09      	ldr	r3, [pc, #36]	; (8009814 <UART_SetConfig+0x670>)
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097f0:	e01a      	b.n	8009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <UART_SetConfig+0x674>)
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097f6:	e017      	b.n	8009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097fe:	e013      	b.n	8009828 <UART_SetConfig+0x684>
 8009800:	40011400 	.word	0x40011400
 8009804:	58024400 	.word	0x58024400
 8009808:	40007800 	.word	0x40007800
 800980c:	40007c00 	.word	0x40007c00
 8009810:	58000c00 	.word	0x58000c00
 8009814:	03d09000 	.word	0x03d09000
 8009818:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009826:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 824d 	beq.w	8009cca <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	4aad      	ldr	r2, [pc, #692]	; (8009aec <UART_SetConfig+0x948>)
 8009836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983a:	461a      	mov	r2, r3
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009842:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	4613      	mov	r3, r2
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	4413      	add	r3, r2
 800984e:	6a3a      	ldr	r2, [r7, #32]
 8009850:	429a      	cmp	r2, r3
 8009852:	d305      	bcc.n	8009860 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800985a:	6a3a      	ldr	r2, [r7, #32]
 800985c:	429a      	cmp	r2, r3
 800985e:	d903      	bls.n	8009868 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009866:	e230      	b.n	8009cca <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	4618      	mov	r0, r3
 800986c:	f04f 0100 	mov.w	r1, #0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	4a9d      	ldr	r2, [pc, #628]	; (8009aec <UART_SetConfig+0x948>)
 8009876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987a:	b29b      	uxth	r3, r3
 800987c:	f04f 0400 	mov.w	r4, #0
 8009880:	461a      	mov	r2, r3
 8009882:	4623      	mov	r3, r4
 8009884:	f7f6 fd28 	bl	80002d8 <__aeabi_uldivmod>
 8009888:	4603      	mov	r3, r0
 800988a:	460c      	mov	r4, r1
 800988c:	4619      	mov	r1, r3
 800988e:	4622      	mov	r2, r4
 8009890:	f04f 0300 	mov.w	r3, #0
 8009894:	f04f 0400 	mov.w	r4, #0
 8009898:	0214      	lsls	r4, r2, #8
 800989a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800989e:	020b      	lsls	r3, r1, #8
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6852      	ldr	r2, [r2, #4]
 80098a4:	0852      	lsrs	r2, r2, #1
 80098a6:	4611      	mov	r1, r2
 80098a8:	f04f 0200 	mov.w	r2, #0
 80098ac:	eb13 0b01 	adds.w	fp, r3, r1
 80098b0:	eb44 0c02 	adc.w	ip, r4, r2
 80098b4:	4658      	mov	r0, fp
 80098b6:	4661      	mov	r1, ip
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f04f 0400 	mov.w	r4, #0
 80098c0:	461a      	mov	r2, r3
 80098c2:	4623      	mov	r3, r4
 80098c4:	f7f6 fd08 	bl	80002d8 <__aeabi_uldivmod>
 80098c8:	4603      	mov	r3, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098d4:	d308      	bcc.n	80098e8 <UART_SetConfig+0x744>
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098dc:	d204      	bcs.n	80098e8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e1f0      	b.n	8009cca <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098ee:	e1ec      	b.n	8009cca <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f8:	f040 8100 	bne.w	8009afc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80098fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	f200 80b7 	bhi.w	8009a74 <UART_SetConfig+0x8d0>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0x768>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009a11 	.word	0x08009a11
 8009910:	08009a19 	.word	0x08009a19
 8009914:	08009a75 	.word	0x08009a75
 8009918:	08009a75 	.word	0x08009a75
 800991c:	08009a21 	.word	0x08009a21
 8009920:	08009a75 	.word	0x08009a75
 8009924:	08009a75 	.word	0x08009a75
 8009928:	08009a75 	.word	0x08009a75
 800992c:	08009a31 	.word	0x08009a31
 8009930:	08009a75 	.word	0x08009a75
 8009934:	08009a75 	.word	0x08009a75
 8009938:	08009a75 	.word	0x08009a75
 800993c:	08009a75 	.word	0x08009a75
 8009940:	08009a75 	.word	0x08009a75
 8009944:	08009a75 	.word	0x08009a75
 8009948:	08009a75 	.word	0x08009a75
 800994c:	08009a41 	.word	0x08009a41
 8009950:	08009a75 	.word	0x08009a75
 8009954:	08009a75 	.word	0x08009a75
 8009958:	08009a75 	.word	0x08009a75
 800995c:	08009a75 	.word	0x08009a75
 8009960:	08009a75 	.word	0x08009a75
 8009964:	08009a75 	.word	0x08009a75
 8009968:	08009a75 	.word	0x08009a75
 800996c:	08009a75 	.word	0x08009a75
 8009970:	08009a75 	.word	0x08009a75
 8009974:	08009a75 	.word	0x08009a75
 8009978:	08009a75 	.word	0x08009a75
 800997c:	08009a75 	.word	0x08009a75
 8009980:	08009a75 	.word	0x08009a75
 8009984:	08009a75 	.word	0x08009a75
 8009988:	08009a75 	.word	0x08009a75
 800998c:	08009a67 	.word	0x08009a67
 8009990:	08009a75 	.word	0x08009a75
 8009994:	08009a75 	.word	0x08009a75
 8009998:	08009a75 	.word	0x08009a75
 800999c:	08009a75 	.word	0x08009a75
 80099a0:	08009a75 	.word	0x08009a75
 80099a4:	08009a75 	.word	0x08009a75
 80099a8:	08009a75 	.word	0x08009a75
 80099ac:	08009a75 	.word	0x08009a75
 80099b0:	08009a75 	.word	0x08009a75
 80099b4:	08009a75 	.word	0x08009a75
 80099b8:	08009a75 	.word	0x08009a75
 80099bc:	08009a75 	.word	0x08009a75
 80099c0:	08009a75 	.word	0x08009a75
 80099c4:	08009a75 	.word	0x08009a75
 80099c8:	08009a75 	.word	0x08009a75
 80099cc:	08009a75 	.word	0x08009a75
 80099d0:	08009a75 	.word	0x08009a75
 80099d4:	08009a75 	.word	0x08009a75
 80099d8:	08009a75 	.word	0x08009a75
 80099dc:	08009a75 	.word	0x08009a75
 80099e0:	08009a75 	.word	0x08009a75
 80099e4:	08009a75 	.word	0x08009a75
 80099e8:	08009a75 	.word	0x08009a75
 80099ec:	08009a75 	.word	0x08009a75
 80099f0:	08009a75 	.word	0x08009a75
 80099f4:	08009a75 	.word	0x08009a75
 80099f8:	08009a75 	.word	0x08009a75
 80099fc:	08009a75 	.word	0x08009a75
 8009a00:	08009a75 	.word	0x08009a75
 8009a04:	08009a75 	.word	0x08009a75
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009a6d 	.word	0x08009a6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a10:	f7fb fdba 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8009a14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a16:	e033      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a18:	f7fb fdcc 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8009a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a1e:	e02f      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a20:	f107 0314 	add.w	r3, r7, #20
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fc ff57 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a2e:	e027      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fd f89b 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a3e:	e01f      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <UART_SetConfig+0x94c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d009      	beq.n	8009a60 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a4c:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <UART_SetConfig+0x94c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a27      	ldr	r2, [pc, #156]	; (8009af4 <UART_SetConfig+0x950>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a5e:	e00f      	b.n	8009a80 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009a60:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <UART_SetConfig+0x950>)
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a64:	e00c      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <UART_SetConfig+0x954>)
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a6a:	e009      	b.n	8009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a72:	e005      	b.n	8009a80 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8121 	beq.w	8009cca <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	4a17      	ldr	r2, [pc, #92]	; (8009aec <UART_SetConfig+0x948>)
 8009a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a92:	461a      	mov	r2, r3
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a9a:	005a      	lsls	r2, r3, #1
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	085b      	lsrs	r3, r3, #1
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2b0f      	cmp	r3, #15
 8009ab4:	d916      	bls.n	8009ae4 <UART_SetConfig+0x940>
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009abc:	d212      	bcs.n	8009ae4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	f023 030f 	bic.w	r3, r3, #15
 8009ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	085b      	lsrs	r3, r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ae0:	60da      	str	r2, [r3, #12]
 8009ae2:	e0f2      	b.n	8009cca <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009aea:	e0ee      	b.n	8009cca <UART_SetConfig+0xb26>
 8009aec:	0800b55c 	.word	0x0800b55c
 8009af0:	58024400 	.word	0x58024400
 8009af4:	03d09000 	.word	0x03d09000
 8009af8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b00:	2b40      	cmp	r3, #64	; 0x40
 8009b02:	f200 80b7 	bhi.w	8009c74 <UART_SetConfig+0xad0>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <UART_SetConfig+0x968>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009c11 	.word	0x08009c11
 8009b10:	08009c19 	.word	0x08009c19
 8009b14:	08009c75 	.word	0x08009c75
 8009b18:	08009c75 	.word	0x08009c75
 8009b1c:	08009c21 	.word	0x08009c21
 8009b20:	08009c75 	.word	0x08009c75
 8009b24:	08009c75 	.word	0x08009c75
 8009b28:	08009c75 	.word	0x08009c75
 8009b2c:	08009c31 	.word	0x08009c31
 8009b30:	08009c75 	.word	0x08009c75
 8009b34:	08009c75 	.word	0x08009c75
 8009b38:	08009c75 	.word	0x08009c75
 8009b3c:	08009c75 	.word	0x08009c75
 8009b40:	08009c75 	.word	0x08009c75
 8009b44:	08009c75 	.word	0x08009c75
 8009b48:	08009c75 	.word	0x08009c75
 8009b4c:	08009c41 	.word	0x08009c41
 8009b50:	08009c75 	.word	0x08009c75
 8009b54:	08009c75 	.word	0x08009c75
 8009b58:	08009c75 	.word	0x08009c75
 8009b5c:	08009c75 	.word	0x08009c75
 8009b60:	08009c75 	.word	0x08009c75
 8009b64:	08009c75 	.word	0x08009c75
 8009b68:	08009c75 	.word	0x08009c75
 8009b6c:	08009c75 	.word	0x08009c75
 8009b70:	08009c75 	.word	0x08009c75
 8009b74:	08009c75 	.word	0x08009c75
 8009b78:	08009c75 	.word	0x08009c75
 8009b7c:	08009c75 	.word	0x08009c75
 8009b80:	08009c75 	.word	0x08009c75
 8009b84:	08009c75 	.word	0x08009c75
 8009b88:	08009c75 	.word	0x08009c75
 8009b8c:	08009c67 	.word	0x08009c67
 8009b90:	08009c75 	.word	0x08009c75
 8009b94:	08009c75 	.word	0x08009c75
 8009b98:	08009c75 	.word	0x08009c75
 8009b9c:	08009c75 	.word	0x08009c75
 8009ba0:	08009c75 	.word	0x08009c75
 8009ba4:	08009c75 	.word	0x08009c75
 8009ba8:	08009c75 	.word	0x08009c75
 8009bac:	08009c75 	.word	0x08009c75
 8009bb0:	08009c75 	.word	0x08009c75
 8009bb4:	08009c75 	.word	0x08009c75
 8009bb8:	08009c75 	.word	0x08009c75
 8009bbc:	08009c75 	.word	0x08009c75
 8009bc0:	08009c75 	.word	0x08009c75
 8009bc4:	08009c75 	.word	0x08009c75
 8009bc8:	08009c75 	.word	0x08009c75
 8009bcc:	08009c75 	.word	0x08009c75
 8009bd0:	08009c75 	.word	0x08009c75
 8009bd4:	08009c75 	.word	0x08009c75
 8009bd8:	08009c75 	.word	0x08009c75
 8009bdc:	08009c75 	.word	0x08009c75
 8009be0:	08009c75 	.word	0x08009c75
 8009be4:	08009c75 	.word	0x08009c75
 8009be8:	08009c75 	.word	0x08009c75
 8009bec:	08009c75 	.word	0x08009c75
 8009bf0:	08009c75 	.word	0x08009c75
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c75 	.word	0x08009c75
 8009bfc:	08009c75 	.word	0x08009c75
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c75 	.word	0x08009c75
 8009c08:	08009c75 	.word	0x08009c75
 8009c0c:	08009c6d 	.word	0x08009c6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c10:	f7fb fcba 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8009c14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c16:	e033      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c18:	f7fb fccc 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8009c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c1e:	e02f      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fc fe57 	bl	80068d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c2e:	e027      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c30:	f107 0308 	add.w	r3, r7, #8
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fc ff9b 	bl	8006b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c3e:	e01f      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c40:	4b2c      	ldr	r3, [pc, #176]	; (8009cf4 <UART_SetConfig+0xb50>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c4c:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <UART_SetConfig+0xb50>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	08db      	lsrs	r3, r3, #3
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	4a28      	ldr	r2, [pc, #160]	; (8009cf8 <UART_SetConfig+0xb54>)
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c5e:	e00f      	b.n	8009c80 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009c60:	4b25      	ldr	r3, [pc, #148]	; (8009cf8 <UART_SetConfig+0xb54>)
 8009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c64:	e00c      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c66:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <UART_SetConfig+0xb58>)
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6a:	e009      	b.n	8009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c72:	e005      	b.n	8009c80 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d021      	beq.n	8009cca <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	4a1d      	ldr	r2, [pc, #116]	; (8009d00 <UART_SetConfig+0xb5c>)
 8009c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	085b      	lsrs	r3, r3, #1
 8009c9e:	441a      	add	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d908      	bls.n	8009cc4 <UART_SetConfig+0xb20>
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d204      	bcs.n	8009cc4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cc0:	60da      	str	r2, [r3, #12]
 8009cc2:	e002      	b.n	8009cca <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009ce6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3738      	adds	r7, #56	; 0x38
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	03d09000 	.word	0x03d09000
 8009cfc:	003d0900 	.word	0x003d0900
 8009d00:	0800b55c 	.word	0x0800b55c

08009d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01a      	beq.n	8009e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e02:	d10a      	bne.n	8009e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e58:	f7f7 fece 	bl	8001bf8 <HAL_GetTick>
 8009e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d10e      	bne.n	8009e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f82c 	bl	8009ed8 <UART_WaitOnFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e022      	b.n	8009ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d10e      	bne.n	8009eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f816 	bl	8009ed8 <UART_WaitOnFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e00c      	b.n	8009ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee8:	e062      	b.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef0:	d05e      	beq.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef2:	f7f7 fe81 	bl	8001bf8 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d302      	bcc.n	8009f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11d      	bne.n	8009f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e045      	b.n	8009fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d02e      	beq.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f60:	d126      	bne.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e00f      	b.n	8009fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	69da      	ldr	r2, [r3, #28]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d08d      	beq.n	8009eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e056      	b.n	800a09e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7f7 fb5c 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2224      	movs	r2, #36	; 0x24
 800a00c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0201 	bic.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff f8bf 	bl	80091a4 <UART_SetConfig>
 800a026:	4603      	mov	r3, r0
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d101      	bne.n	800a030 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e036      	b.n	800a09e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fe63 	bl	8009d04 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a04c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	430a      	orrs	r2, r1
 800a060:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	055b      	lsls	r3, r3, #21
 800a066:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	041b      	lsls	r3, r3, #16
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <HAL_RS485Ex_Init+0xd0>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	6979      	ldr	r1, [r7, #20]
 800a082:	430b      	orrs	r3, r1
 800a084:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0201 	orr.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fed6 	bl	8009e48 <UART_CheckIdleState>
 800a09c:	4603      	mov	r3, r0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	fc00ffff 	.word	0xfc00ffff

0800a0ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d101      	bne.n	800a0c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e027      	b.n	800a112 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2224      	movs	r2, #36	; 0x24
 800a0ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0201 	bic.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2220      	movs	r2, #32
 800a104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a132:	2302      	movs	r3, #2
 800a134:	e02d      	b.n	800a192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2224      	movs	r2, #36	; 0x24
 800a142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f022 0201 	bic.w	r2, r2, #1
 800a15c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f850 	bl	800a218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d101      	bne.n	800a1b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e02d      	b.n	800a20e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2224      	movs	r2, #36	; 0x24
 800a1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0201 	bic.w	r2, r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f812 	bl	800a218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a220:	4a2f      	ldr	r2, [pc, #188]	; (800a2e0 <UARTEx_SetNbDataToProcess+0xc8>)
 800a222:	f107 0314 	add.w	r3, r7, #20
 800a226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a22a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a22e:	4a2d      	ldr	r2, [pc, #180]	; (800a2e4 <UARTEx_SetNbDataToProcess+0xcc>)
 800a230:	f107 030c 	add.w	r3, r7, #12
 800a234:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a238:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a240:	2b00      	cmp	r3, #0
 800a242:	d108      	bne.n	800a256 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a254:	e03d      	b.n	800a2d2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a256:	2310      	movs	r3, #16
 800a258:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a25a:	2310      	movs	r3, #16
 800a25c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	0e5b      	lsrs	r3, r3, #25
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	0f5b      	lsrs	r3, r3, #29
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a27e:	7fbb      	ldrb	r3, [r7, #30]
 800a280:	7f3a      	ldrb	r2, [r7, #28]
 800a282:	f107 0120 	add.w	r1, r7, #32
 800a286:	440a      	add	r2, r1
 800a288:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
 800a290:	7f3a      	ldrb	r2, [r7, #28]
 800a292:	f107 0120 	add.w	r1, r7, #32
 800a296:	440a      	add	r2, r1
 800a298:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a2a8:	7ffb      	ldrb	r3, [r7, #31]
 800a2aa:	7f7a      	ldrb	r2, [r7, #29]
 800a2ac:	f107 0120 	add.w	r1, r7, #32
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a2b6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ba:	7f7a      	ldrb	r2, [r7, #29]
 800a2bc:	f107 0120 	add.w	r1, r7, #32
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a2c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a2d2:	bf00      	nop
 800a2d4:	3724      	adds	r7, #36	; 0x24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	0800b31c 	.word	0x0800b31c
 800a2e4:	0800b324 	.word	0x0800b324

0800a2e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d121      	bne.n	800a33e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b27      	ldr	r3, [pc, #156]	; (800a39c <FMC_SDRAM_Init+0xb4>)
 800a300:	4013      	ands	r3, r2
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6851      	ldr	r1, [r2, #4]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	6892      	ldr	r2, [r2, #8]
 800a30a:	4311      	orrs	r1, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	68d2      	ldr	r2, [r2, #12]
 800a310:	4311      	orrs	r1, r2
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	6912      	ldr	r2, [r2, #16]
 800a316:	4311      	orrs	r1, r2
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	6952      	ldr	r2, [r2, #20]
 800a31c:	4311      	orrs	r1, r2
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	6992      	ldr	r2, [r2, #24]
 800a322:	4311      	orrs	r1, r2
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	69d2      	ldr	r2, [r2, #28]
 800a328:	4311      	orrs	r1, r2
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	6a12      	ldr	r2, [r2, #32]
 800a32e:	4311      	orrs	r1, r2
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a334:	430a      	orrs	r2, r1
 800a336:	431a      	orrs	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	e026      	b.n	800a38c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	69d9      	ldr	r1, [r3, #28]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	4319      	orrs	r1, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	430b      	orrs	r3, r1
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <FMC_SDRAM_Init+0xb4>)
 800a362:	4013      	ands	r3, r2
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	6851      	ldr	r1, [r2, #4]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	6892      	ldr	r2, [r2, #8]
 800a36c:	4311      	orrs	r1, r2
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	68d2      	ldr	r2, [r2, #12]
 800a372:	4311      	orrs	r1, r2
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	6912      	ldr	r2, [r2, #16]
 800a378:	4311      	orrs	r1, r2
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	6952      	ldr	r2, [r2, #20]
 800a37e:	4311      	orrs	r1, r2
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	6992      	ldr	r2, [r2, #24]
 800a384:	430a      	orrs	r2, r1
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	ffff8000 	.word	0xffff8000

0800a3a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d128      	bne.n	800a404 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	1e59      	subs	r1, r3, #1
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4319      	orrs	r1, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	4319      	orrs	r1, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	031b      	lsls	r3, r3, #12
 800a3dc:	4319      	orrs	r1, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	041b      	lsls	r3, r3, #16
 800a3e6:	4319      	orrs	r1, r3
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	051b      	lsls	r3, r3, #20
 800a3f0:	4319      	orrs	r1, r3
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	061b      	lsls	r3, r3, #24
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	609a      	str	r2, [r3, #8]
 800a402:	e02d      	b.n	800a460 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	4b19      	ldr	r3, [pc, #100]	; (800a470 <FMC_SDRAM_Timing_Init+0xd0>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	68d2      	ldr	r2, [r2, #12]
 800a410:	3a01      	subs	r2, #1
 800a412:	0311      	lsls	r1, r2, #12
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	6952      	ldr	r2, [r2, #20]
 800a418:	3a01      	subs	r2, #1
 800a41a:	0512      	lsls	r2, r2, #20
 800a41c:	430a      	orrs	r2, r1
 800a41e:	431a      	orrs	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	1e59      	subs	r1, r3, #1
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	3b01      	subs	r3, #1
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	4319      	orrs	r1, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	4319      	orrs	r1, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	041b      	lsls	r3, r3, #16
 800a44e:	4319      	orrs	r1, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	3b01      	subs	r3, #1
 800a456:	061b      	lsls	r3, r3, #24
 800a458:	430b      	orrs	r3, r1
 800a45a:	431a      	orrs	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	ff0f0fff 	.word	0xff0f0fff

0800a474 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a474:	b084      	sub	sp, #16
 800a476:	b480      	push	{r7}
 800a478:	b085      	sub	sp, #20
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	f107 001c 	add.w	r0, r7, #28
 800a482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a48a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a48c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a48e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a492:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a496:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a49a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <SDMMC_Init+0x50>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	b004      	add	sp, #16
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	ffc02c00 	.word	0xffc02c00

0800a4c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f043 0203 	orr.w	r2, r3, #3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0303 	and.w	r3, r3, #3
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a53e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a544:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a54a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	4b06      	ldr	r3, [pc, #24]	; (800a570 <SDMMC_SendCommand+0x50>)
 800a558:	4013      	ands	r3, r2
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	fffee0c0 	.word	0xfffee0c0

0800a574 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	b2db      	uxtb	r3, r3
}
 800a582:	4618      	mov	r0, r3
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3314      	adds	r3, #20
 800a59c:	461a      	mov	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5da:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0

}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a61a:	2310      	movs	r3, #16
 800a61c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a61e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a62c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ff73 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a63a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a63e:	2110      	movs	r1, #16
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9e7 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a648:	69fb      	ldr	r3, [r7, #28]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b08a      	sub	sp, #40	; 0x28
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a662:	2307      	movs	r3, #7
 800a664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a66a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a674:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a676:	f107 0310 	add.w	r3, r7, #16
 800a67a:	4619      	mov	r1, r3
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7ff ff4f 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a682:	f241 3288 	movw	r2, #5000	; 0x1388
 800a686:	2107      	movs	r1, #7
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f9c3 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a692:	4618      	mov	r0, r3
 800a694:	3728      	adds	r7, #40	; 0x28
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6b8:	f107 0308 	add.w	r3, r7, #8
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff ff2e 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f977 	bl	800a9b8 <SDMMC_GetCmdError>
 800a6ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3720      	adds	r7, #32
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b088      	sub	sp, #32
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a6de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a6e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f8:	f107 0308 	add.w	r3, r7, #8
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff ff0e 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fb79 	bl	800adfc <SDMMC_GetCmdResp7>
 800a70a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a70c:	69fb      	ldr	r3, [r7, #28]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b088      	sub	sp, #32
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a724:	2337      	movs	r3, #55	; 0x37
 800a726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a738:	f107 0308 	add.w	r3, r7, #8
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff feee 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a744:	f241 3288 	movw	r2, #5000	; 0x1388
 800a748:	2137      	movs	r1, #55	; 0x37
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f962 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a752:	69fb      	ldr	r3, [r7, #28]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3720      	adds	r7, #32
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a76a:	2329      	movs	r3, #41	; 0x29
 800a76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a76e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a77c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a77e:	f107 0308 	add.w	r3, r7, #8
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff fecb 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fa7e 	bl	800ac8c <SDMMC_GetCmdResp3>
 800a790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a792:	69fb      	ldr	r3, [r7, #28]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3720      	adds	r7, #32
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a7aa:	2306      	movs	r3, #6
 800a7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7be:	f107 0308 	add.w	r3, r7, #8
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff feab 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a7ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ce:	2106      	movs	r1, #6
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f91f 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d8:	69fb      	ldr	r3, [r7, #28]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3720      	adds	r7, #32
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b088      	sub	sp, #32
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a7ee:	2333      	movs	r3, #51	; 0x33
 800a7f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a800:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff fe89 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a80e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a812:	2133      	movs	r1, #51	; 0x33
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f8fd 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a81c:	69fb      	ldr	r3, [r7, #28]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b088      	sub	sp, #32
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a832:	2302      	movs	r3, #2
 800a834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff fe67 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9d0 	bl	800abf8 <SDMMC_GetCmdResp2>
 800a858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85a:	69fb      	ldr	r3, [r7, #28]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a872:	2309      	movs	r3, #9
 800a874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a876:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a87a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a884:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a886:	f107 0308 	add.w	r3, r7, #8
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff fe47 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f9b0 	bl	800abf8 <SDMMC_GetCmdResp2>
 800a898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89a:	69fb      	ldr	r3, [r7, #28]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff fe27 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	2103      	movs	r1, #3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa18 	bl	800ad0c <SDMMC_GetCmdResp6>
 800a8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8de:	69fb      	ldr	r3, [r7, #28]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a8f6:	230d      	movs	r3, #13
 800a8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fe05 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a916:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91a:	210d      	movs	r1, #13
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f879 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a924:	69fb      	ldr	r3, [r7, #28]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b088      	sub	sp, #32
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a93a:	230d      	movs	r3, #13
 800a93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a93e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a944:	2300      	movs	r3, #0
 800a946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a94c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff fde3 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a95a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95e:	210d      	movs	r1, #13
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f857 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a968:	69fb      	ldr	r3, [r7, #28]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b088      	sub	sp, #32
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a97e:	230b      	movs	r3, #11
 800a980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a982:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a988:	2300      	movs	r3, #0
 800a98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a990:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a992:	f107 0308 	add.w	r3, r7, #8
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff fdc1 	bl	800a520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a2:	210b      	movs	r1, #11
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f835 	bl	800aa14 <SDMMC_GetCmdResp1>
 800a9aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9c0:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <SDMMC_GetCmdError+0x50>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <SDMMC_GetCmdError+0x54>)
 800a9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ca:	0a5b      	lsrs	r3, r3, #9
 800a9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
 800a9d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	1e5a      	subs	r2, r3, #1
 800a9da:	60fa      	str	r2, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d102      	bne.n	800a9e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9e4:	e009      	b.n	800a9fa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0f1      	beq.n	800a9d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a06      	ldr	r2, [pc, #24]	; (800aa10 <SDMMC_GetCmdError+0x58>)
 800a9f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	24000000 	.word	0x24000000
 800aa0c:	10624dd3 	.word	0x10624dd3
 800aa10:	002000c5 	.word	0x002000c5

0800aa14 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aa22:	4b70      	ldr	r3, [pc, #448]	; (800abe4 <SDMMC_GetCmdResp1+0x1d0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a70      	ldr	r2, [pc, #448]	; (800abe8 <SDMMC_GetCmdResp1+0x1d4>)
 800aa28:	fba2 2303 	umull	r2, r3, r2, r3
 800aa2c:	0a5a      	lsrs	r2, r3, #9
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	fb02 f303 	mul.w	r3, r2, r3
 800aa34:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	1e5a      	subs	r2, r3, #1
 800aa3a:	61fa      	str	r2, [r7, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa44:	e0c9      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4b67      	ldr	r3, [pc, #412]	; (800abec <SDMMC_GetCmdResp1+0x1d8>)
 800aa50:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0ef      	beq.n	800aa36 <SDMMC_GetCmdResp1+0x22>
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1ea      	bne.n	800aa36 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2204      	movs	r2, #4
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa72:	2304      	movs	r3, #4
 800aa74:	e0b1      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0a6      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4a58      	ldr	r2, [pc, #352]	; (800abf0 <SDMMC_GetCmdResp1+0x1dc>)
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fd6e 	bl	800a574 <SDMMC_GetCommandResponse>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d001      	beq.n	800aaa6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e099      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fd70 	bl	800a58e <SDMMC_GetResponse>
 800aaae:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4b50      	ldr	r3, [pc, #320]	; (800abf4 <SDMMC_GetCmdResp1+0x1e0>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e08d      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da02      	bge.n	800aaca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aac8:	e087      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aad4:	2340      	movs	r3, #64	; 0x40
 800aad6:	e080      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aae2:	2380      	movs	r3, #128	; 0x80
 800aae4:	e079      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aaf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaf4:	e071      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab04:	e069      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab14:	e061      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab24:	e059      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab34:	e051      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab44:	e049      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab54:	e041      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab64:	e039      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab74:	e031      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab84:	e029      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab94:	e021      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aba0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aba4:	e019      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800abb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abb4:	e011      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abc4:	e009      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f003 0308 	and.w	r3, r3, #8
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abd4:	e001      	b.n	800abda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	24000000 	.word	0x24000000
 800abe8:	10624dd3 	.word	0x10624dd3
 800abec:	00200045 	.word	0x00200045
 800abf0:	002000c5 	.word	0x002000c5
 800abf4:	fdffe008 	.word	0xfdffe008

0800abf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac00:	4b1f      	ldr	r3, [pc, #124]	; (800ac80 <SDMMC_GetCmdResp2+0x88>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <SDMMC_GetCmdResp2+0x8c>)
 800ac06:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0a:	0a5b      	lsrs	r3, r3, #9
 800ac0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac10:	fb02 f303 	mul.w	r3, r2, r3
 800ac14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	1e5a      	subs	r2, r3, #1
 800ac1a:	60fa      	str	r2, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac24:	e026      	b.n	800ac74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ef      	beq.n	800ac16 <SDMMC_GetCmdResp2+0x1e>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1ea      	bne.n	800ac16 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2204      	movs	r2, #4
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac52:	2304      	movs	r3, #4
 800ac54:	e00e      	b.n	800ac74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d004      	beq.n	800ac6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e003      	b.n	800ac74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a06      	ldr	r2, [pc, #24]	; (800ac88 <SDMMC_GetCmdResp2+0x90>)
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	24000000 	.word	0x24000000
 800ac84:	10624dd3 	.word	0x10624dd3
 800ac88:	002000c5 	.word	0x002000c5

0800ac8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac94:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <SDMMC_GetCmdResp3+0x74>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a1a      	ldr	r2, [pc, #104]	; (800ad04 <SDMMC_GetCmdResp3+0x78>)
 800ac9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9e:	0a5b      	lsrs	r3, r3, #9
 800aca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	60fa      	str	r2, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acb8:	e01b      	b.n	800acf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0ef      	beq.n	800acaa <SDMMC_GetCmdResp3+0x1e>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1ea      	bne.n	800acaa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2204      	movs	r2, #4
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ace6:	2304      	movs	r3, #4
 800ace8:	e003      	b.n	800acf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a06      	ldr	r2, [pc, #24]	; (800ad08 <SDMMC_GetCmdResp3+0x7c>)
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	24000000 	.word	0x24000000
 800ad04:	10624dd3 	.word	0x10624dd3
 800ad08:	002000c5 	.word	0x002000c5

0800ad0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	460b      	mov	r3, r1
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad1a:	4b35      	ldr	r3, [pc, #212]	; (800adf0 <SDMMC_GetCmdResp6+0xe4>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a35      	ldr	r2, [pc, #212]	; (800adf4 <SDMMC_GetCmdResp6+0xe8>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	0a5b      	lsrs	r3, r3, #9
 800ad26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	1e5a      	subs	r2, r3, #1
 800ad34:	61fa      	str	r2, [r7, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d102      	bne.n	800ad40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad3e:	e052      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0ef      	beq.n	800ad30 <SDMMC_GetCmdResp6+0x24>
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1ea      	bne.n	800ad30 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d004      	beq.n	800ad70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2204      	movs	r2, #4
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	e03a      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e02f      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff fbf4 	bl	800a574 <SDMMC_GetCommandResponse>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d001      	beq.n	800ad9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e025      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <SDMMC_GetCmdResp6+0xec>)
 800ad9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fbf3 	bl	800a58e <SDMMC_GetResponse>
 800ada8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	0c1b      	lsrs	r3, r3, #16
 800adb8:	b29a      	uxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e011      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800add0:	e009      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800addc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ade0:	e001      	b.n	800ade6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ade2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	24000000 	.word	0x24000000
 800adf4:	10624dd3 	.word	0x10624dd3
 800adf8:	002000c5 	.word	0x002000c5

0800adfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae04:	4b22      	ldr	r3, [pc, #136]	; (800ae90 <SDMMC_GetCmdResp7+0x94>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a22      	ldr	r2, [pc, #136]	; (800ae94 <SDMMC_GetCmdResp7+0x98>)
 800ae0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0e:	0a5b      	lsrs	r3, r3, #9
 800ae10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae14:	fb02 f303 	mul.w	r3, r2, r3
 800ae18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1e5a      	subs	r2, r3, #1
 800ae1e:	60fa      	str	r2, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae28:	e02c      	b.n	800ae84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0ef      	beq.n	800ae1a <SDMMC_GetCmdResp7+0x1e>
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1ea      	bne.n	800ae1a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2204      	movs	r2, #4
 800ae54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae56:	2304      	movs	r3, #4
 800ae58:	e014      	b.n	800ae84 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e009      	b.n	800ae84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2240      	movs	r2, #64	; 0x40
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae82:	2300      	movs	r3, #0

}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	24000000 	.word	0x24000000
 800ae94:	10624dd3 	.word	0x10624dd3

0800ae98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae98:	b084      	sub	sp, #16
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	f107 001c 	add.w	r0, r7, #28
 800aea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d120      	bne.n	800aef2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <USB_CoreInit+0xc0>)
 800aec2:	4013      	ands	r3, r2
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d105      	bne.n	800aee6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f8bc 	bl	800b064 <USB_CoreReset>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
 800aef0:	e01a      	b.n	800af28 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f8b0 	bl	800b064 <USB_CoreReset>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800af08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
 800af1a:	e005      	b.n	800af28 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d10b      	bne.n	800af46 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	f043 0206 	orr.w	r2, r3, #6
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f043 0220 	orr.w	r2, r3, #32
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af52:	b004      	add	sp, #16
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	ffbdffbf 	.word	0xffbdffbf

0800af5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f023 0201 	bic.w	r2, r3, #1
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d106      	bne.n	800afaa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]
 800afa8:	e00b      	b.n	800afc2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]
 800afbc:	e001      	b.n	800afc2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e003      	b.n	800afca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800afc2:	2032      	movs	r0, #50	; 0x32
 800afc4:	f7f6 fe24 	bl	8001c10 <HAL_Delay>

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	019b      	lsls	r3, r3, #6
 800afe6:	f043 0220 	orr.w	r2, r3, #32
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3301      	adds	r3, #1
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4a09      	ldr	r2, [pc, #36]	; (800b01c <USB_FlushTxFifo+0x48>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d901      	bls.n	800b000 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e006      	b.n	800b00e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d0f0      	beq.n	800afee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	00030d40 	.word	0x00030d40

0800b020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2210      	movs	r2, #16
 800b030:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4a09      	ldr	r2, [pc, #36]	; (800b060 <USB_FlushRxFifo+0x40>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d901      	bls.n	800b044 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e006      	b.n	800b052 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	f003 0310 	and.w	r3, r3, #16
 800b04c:	2b10      	cmp	r3, #16
 800b04e:	d0f0      	beq.n	800b032 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	00030d40 	.word	0x00030d40

0800b064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4a13      	ldr	r2, [pc, #76]	; (800b0c8 <USB_CoreReset+0x64>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d901      	bls.n	800b082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e01b      	b.n	800b0ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	daf2      	bge.n	800b070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f043 0201 	orr.w	r2, r3, #1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a09      	ldr	r2, [pc, #36]	; (800b0c8 <USB_CoreReset+0x64>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d901      	bls.n	800b0ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e006      	b.n	800b0ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d0f0      	beq.n	800b09a <USB_CoreReset+0x36>

  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	00030d40 	.word	0x00030d40

0800b0cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	f107 001c 	add.w	r0, r7, #28
 800b0da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d018      	beq.n	800b144 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	2b01      	cmp	r3, #1
 800b116:	d10a      	bne.n	800b12e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b126:	f043 0304 	orr.w	r3, r3, #4
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	e014      	b.n	800b158 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b13c:	f023 0304 	bic.w	r3, r3, #4
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	e009      	b.n	800b158 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b152:	f023 0304 	bic.w	r3, r3, #4
 800b156:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b158:	2110      	movs	r1, #16
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff ff3a 	bl	800afd4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ff5d 	bl	800b020 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	e015      	b.n	800b198 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	4413      	add	r3, r2
 800b174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b178:	461a      	mov	r2, r3
 800b17a:	f04f 33ff 	mov.w	r3, #4294967295
 800b17e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b18c:	461a      	mov	r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3e5      	bcc.n	800b16c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f848 	bl	800b238 <USB_DriveVbus>

  HAL_Delay(200U);
 800b1a8:	20c8      	movs	r0, #200	; 0xc8
 800b1aa:	f7f6 fd31 	bl	8001c10 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a14      	ldr	r2, [pc, #80]	; (800b224 <USB_HostInit+0x158>)
 800b1d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a13      	ldr	r2, [pc, #76]	; (800b228 <USB_HostInit+0x15c>)
 800b1da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b1de:	e009      	b.n	800b1f4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2280      	movs	r2, #128	; 0x80
 800b1e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a10      	ldr	r2, [pc, #64]	; (800b22c <USB_HostInit+0x160>)
 800b1ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a10      	ldr	r2, [pc, #64]	; (800b230 <USB_HostInit+0x164>)
 800b1f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	f043 0210 	orr.w	r2, r3, #16
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <USB_HostInit+0x168>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b21e:	b004      	add	sp, #16
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	01000200 	.word	0x01000200
 800b228:	00e00300 	.word	0x00e00300
 800b22c:	00600080 	.word	0x00600080
 800b230:	004000e0 	.word	0x004000e0
 800b234:	a3200008 	.word	0xa3200008

0800b238 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b25c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <USB_DriveVbus+0x44>
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d106      	bne.n	800b27c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b27a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b286:	d109      	bne.n	800b29c <USB_DriveVbus+0x64>
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b29a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
	...

0800b2ac <__libc_init_array>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4e0d      	ldr	r6, [pc, #52]	; (800b2e4 <__libc_init_array+0x38>)
 800b2b0:	4c0d      	ldr	r4, [pc, #52]	; (800b2e8 <__libc_init_array+0x3c>)
 800b2b2:	1ba4      	subs	r4, r4, r6
 800b2b4:	10a4      	asrs	r4, r4, #2
 800b2b6:	2500      	movs	r5, #0
 800b2b8:	42a5      	cmp	r5, r4
 800b2ba:	d109      	bne.n	800b2d0 <__libc_init_array+0x24>
 800b2bc:	4e0b      	ldr	r6, [pc, #44]	; (800b2ec <__libc_init_array+0x40>)
 800b2be:	4c0c      	ldr	r4, [pc, #48]	; (800b2f0 <__libc_init_array+0x44>)
 800b2c0:	f000 f820 	bl	800b304 <_init>
 800b2c4:	1ba4      	subs	r4, r4, r6
 800b2c6:	10a4      	asrs	r4, r4, #2
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	42a5      	cmp	r5, r4
 800b2cc:	d105      	bne.n	800b2da <__libc_init_array+0x2e>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2d4:	4798      	blx	r3
 800b2d6:	3501      	adds	r5, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__libc_init_array+0xc>
 800b2da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2de:	4798      	blx	r3
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	e7f2      	b.n	800b2ca <__libc_init_array+0x1e>
 800b2e4:	0800b57c 	.word	0x0800b57c
 800b2e8:	0800b57c 	.word	0x0800b57c
 800b2ec:	0800b57c 	.word	0x0800b57c
 800b2f0:	0800b580 	.word	0x0800b580

0800b2f4 <memset>:
 800b2f4:	4402      	add	r2, r0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d100      	bne.n	800b2fe <memset+0xa>
 800b2fc:	4770      	bx	lr
 800b2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b302:	e7f9      	b.n	800b2f8 <memset+0x4>

0800b304 <_init>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr

0800b310 <_fini>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr
